// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: comfort_service_api_v1.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_comfort_5fservice_5fapi_5fv1_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_comfort_5fservice_5fapi_5fv1_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015008 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_comfort_5fservice_5fapi_5fv1_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_comfort_5fservice_5fapi_5fv1_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_comfort_5fservice_5fapi_5fv1_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_comfort_5fservice_5fapi_5fv1_2eproto_metadata_getter(int index);
namespace comfortServiceAPI {
namespace v1 {
class ComfortRequest;
struct ComfortRequestDefaultTypeInternal;
extern ComfortRequestDefaultTypeInternal _ComfortRequest_default_instance_;
class ComfortResponse;
struct ComfortResponseDefaultTypeInternal;
extern ComfortResponseDefaultTypeInternal _ComfortResponse_default_instance_;
class VDVRequest;
struct VDVRequestDefaultTypeInternal;
extern VDVRequestDefaultTypeInternal _VDVRequest_default_instance_;
class VDVResponse;
struct VDVResponseDefaultTypeInternal;
extern VDVResponseDefaultTypeInternal _VDVResponse_default_instance_;
}  // namespace v1
}  // namespace comfortServiceAPI
PROTOBUF_NAMESPACE_OPEN
template<> ::comfortServiceAPI::v1::ComfortRequest* Arena::CreateMaybeMessage<::comfortServiceAPI::v1::ComfortRequest>(Arena*);
template<> ::comfortServiceAPI::v1::ComfortResponse* Arena::CreateMaybeMessage<::comfortServiceAPI::v1::ComfortResponse>(Arena*);
template<> ::comfortServiceAPI::v1::VDVRequest* Arena::CreateMaybeMessage<::comfortServiceAPI::v1::VDVRequest>(Arena*);
template<> ::comfortServiceAPI::v1::VDVResponse* Arena::CreateMaybeMessage<::comfortServiceAPI::v1::VDVResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace comfortServiceAPI {
namespace v1 {

// ===================================================================

class ComfortRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:comfortServiceAPI.v1.ComfortRequest) */ {
 public:
  inline ComfortRequest() : ComfortRequest(nullptr) {}
  virtual ~ComfortRequest();
  explicit constexpr ComfortRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ComfortRequest(const ComfortRequest& from);
  ComfortRequest(ComfortRequest&& from) noexcept
    : ComfortRequest() {
    *this = ::std::move(from);
  }

  inline ComfortRequest& operator=(const ComfortRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ComfortRequest& operator=(ComfortRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ComfortRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ComfortRequest* internal_default_instance() {
    return reinterpret_cast<const ComfortRequest*>(
               &_ComfortRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ComfortRequest& a, ComfortRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ComfortRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ComfortRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ComfortRequest* New() const final {
    return CreateMaybeMessage<ComfortRequest>(nullptr);
  }

  ComfortRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ComfortRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ComfortRequest& from);
  void MergeFrom(const ComfortRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ComfortRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "comfortServiceAPI.v1.ComfortRequest";
  }
  protected:
  explicit ComfortRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_comfort_5fservice_5fapi_5fv1_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUnixTimeFieldNumber = 1,
    kHumanWeightedVibrationXFieldNumber = 2,
    kHumanWeightedVibrationYFieldNumber = 3,
    kHumanWeightedVibrationZFieldNumber = 4,
  };
  // repeated double unix_time = 1;
  int unix_time_size() const;
  private:
  int _internal_unix_time_size() const;
  public:
  void clear_unix_time();
  private:
  double _internal_unix_time(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_unix_time() const;
  void _internal_add_unix_time(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_unix_time();
  public:
  double unix_time(int index) const;
  void set_unix_time(int index, double value);
  void add_unix_time(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      unix_time() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_unix_time();

  // repeated float humanWeightedVibrationX = 2;
  int humanweightedvibrationx_size() const;
  private:
  int _internal_humanweightedvibrationx_size() const;
  public:
  void clear_humanweightedvibrationx();
  private:
  float _internal_humanweightedvibrationx(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_humanweightedvibrationx() const;
  void _internal_add_humanweightedvibrationx(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_humanweightedvibrationx();
  public:
  float humanweightedvibrationx(int index) const;
  void set_humanweightedvibrationx(int index, float value);
  void add_humanweightedvibrationx(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      humanweightedvibrationx() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_humanweightedvibrationx();

  // repeated float humanWeightedVibrationY = 3;
  int humanweightedvibrationy_size() const;
  private:
  int _internal_humanweightedvibrationy_size() const;
  public:
  void clear_humanweightedvibrationy();
  private:
  float _internal_humanweightedvibrationy(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_humanweightedvibrationy() const;
  void _internal_add_humanweightedvibrationy(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_humanweightedvibrationy();
  public:
  float humanweightedvibrationy(int index) const;
  void set_humanweightedvibrationy(int index, float value);
  void add_humanweightedvibrationy(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      humanweightedvibrationy() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_humanweightedvibrationy();

  // repeated float humanWeightedVibrationZ = 4;
  int humanweightedvibrationz_size() const;
  private:
  int _internal_humanweightedvibrationz_size() const;
  public:
  void clear_humanweightedvibrationz();
  private:
  float _internal_humanweightedvibrationz(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_humanweightedvibrationz() const;
  void _internal_add_humanweightedvibrationz(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_humanweightedvibrationz();
  public:
  float humanweightedvibrationz(int index) const;
  void set_humanweightedvibrationz(int index, float value);
  void add_humanweightedvibrationz(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      humanweightedvibrationz() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_humanweightedvibrationz();

  // @@protoc_insertion_point(class_scope:comfortServiceAPI.v1.ComfortRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > unix_time_;
  mutable std::atomic<int> _unix_time_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > humanweightedvibrationx_;
  mutable std::atomic<int> _humanweightedvibrationx_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > humanweightedvibrationy_;
  mutable std::atomic<int> _humanweightedvibrationy_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > humanweightedvibrationz_;
  mutable std::atomic<int> _humanweightedvibrationz_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_comfort_5fservice_5fapi_5fv1_2eproto;
};
// -------------------------------------------------------------------

class ComfortResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:comfortServiceAPI.v1.ComfortResponse) */ {
 public:
  inline ComfortResponse() : ComfortResponse(nullptr) {}
  virtual ~ComfortResponse();
  explicit constexpr ComfortResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ComfortResponse(const ComfortResponse& from);
  ComfortResponse(ComfortResponse&& from) noexcept
    : ComfortResponse() {
    *this = ::std::move(from);
  }

  inline ComfortResponse& operator=(const ComfortResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ComfortResponse& operator=(ComfortResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ComfortResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ComfortResponse* internal_default_instance() {
    return reinterpret_cast<const ComfortResponse*>(
               &_ComfortResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ComfortResponse& a, ComfortResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ComfortResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ComfortResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ComfortResponse* New() const final {
    return CreateMaybeMessage<ComfortResponse>(nullptr);
  }

  ComfortResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ComfortResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ComfortResponse& from);
  void MergeFrom(const ComfortResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ComfortResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "comfortServiceAPI.v1.ComfortResponse";
  }
  protected:
  explicit ComfortResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_comfort_5fservice_5fapi_5fv1_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUnixTimeFieldNumber = 1,
    kRatingFieldNumber = 2,
    kPercentageMaxRatingFieldNumber = 3,
  };
  // repeated double unix_time = 1;
  int unix_time_size() const;
  private:
  int _internal_unix_time_size() const;
  public:
  void clear_unix_time();
  private:
  double _internal_unix_time(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_unix_time() const;
  void _internal_add_unix_time(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_unix_time();
  public:
  double unix_time(int index) const;
  void set_unix_time(int index, double value);
  void add_unix_time(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      unix_time() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_unix_time();

  // string rating = 2;
  void clear_rating();
  const std::string& rating() const;
  void set_rating(const std::string& value);
  void set_rating(std::string&& value);
  void set_rating(const char* value);
  void set_rating(const char* value, size_t size);
  std::string* mutable_rating();
  std::string* release_rating();
  void set_allocated_rating(std::string* rating);
  private:
  const std::string& _internal_rating() const;
  void _internal_set_rating(const std::string& value);
  std::string* _internal_mutable_rating();
  public:

  // string percentageMaxRating = 3;
  bool has_percentagemaxrating() const;
  private:
  bool _internal_has_percentagemaxrating() const;
  public:
  void clear_percentagemaxrating();
  const std::string& percentagemaxrating() const;
  void set_percentagemaxrating(const std::string& value);
  void set_percentagemaxrating(std::string&& value);
  void set_percentagemaxrating(const char* value);
  void set_percentagemaxrating(const char* value, size_t size);
  std::string* mutable_percentagemaxrating();
  std::string* release_percentagemaxrating();
  void set_allocated_percentagemaxrating(std::string* percentagemaxrating);
  private:
  const std::string& _internal_percentagemaxrating() const;
  void _internal_set_percentagemaxrating(const std::string& value);
  std::string* _internal_mutable_percentagemaxrating();
  public:

  // @@protoc_insertion_point(class_scope:comfortServiceAPI.v1.ComfortResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > unix_time_;
  mutable std::atomic<int> _unix_time_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rating_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr percentagemaxrating_;
  friend struct ::TableStruct_comfort_5fservice_5fapi_5fv1_2eproto;
};
// -------------------------------------------------------------------

class VDVRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:comfortServiceAPI.v1.VDVRequest) */ {
 public:
  inline VDVRequest() : VDVRequest(nullptr) {}
  virtual ~VDVRequest();
  explicit constexpr VDVRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VDVRequest(const VDVRequest& from);
  VDVRequest(VDVRequest&& from) noexcept
    : VDVRequest() {
    *this = ::std::move(from);
  }

  inline VDVRequest& operator=(const VDVRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline VDVRequest& operator=(VDVRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const VDVRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const VDVRequest* internal_default_instance() {
    return reinterpret_cast<const VDVRequest*>(
               &_VDVRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(VDVRequest& a, VDVRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(VDVRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VDVRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VDVRequest* New() const final {
    return CreateMaybeMessage<VDVRequest>(nullptr);
  }

  VDVRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VDVRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VDVRequest& from);
  void MergeFrom(const VDVRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VDVRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "comfortServiceAPI.v1.VDVRequest";
  }
  protected:
  explicit VDVRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_comfort_5fservice_5fapi_5fv1_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUnixTimeFieldNumber = 1,
    kWeightedAccelerationFieldNumber = 2,
  };
  // repeated double unix_time = 1;
  int unix_time_size() const;
  private:
  int _internal_unix_time_size() const;
  public:
  void clear_unix_time();
  private:
  double _internal_unix_time(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_unix_time() const;
  void _internal_add_unix_time(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_unix_time();
  public:
  double unix_time(int index) const;
  void set_unix_time(int index, double value);
  void add_unix_time(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      unix_time() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_unix_time();

  // repeated float weightedAcceleration = 2;
  int weightedacceleration_size() const;
  private:
  int _internal_weightedacceleration_size() const;
  public:
  void clear_weightedacceleration();
  private:
  float _internal_weightedacceleration(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_weightedacceleration() const;
  void _internal_add_weightedacceleration(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_weightedacceleration();
  public:
  float weightedacceleration(int index) const;
  void set_weightedacceleration(int index, float value);
  void add_weightedacceleration(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      weightedacceleration() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_weightedacceleration();

  // @@protoc_insertion_point(class_scope:comfortServiceAPI.v1.VDVRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > unix_time_;
  mutable std::atomic<int> _unix_time_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > weightedacceleration_;
  mutable std::atomic<int> _weightedacceleration_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_comfort_5fservice_5fapi_5fv1_2eproto;
};
// -------------------------------------------------------------------

class VDVResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:comfortServiceAPI.v1.VDVResponse) */ {
 public:
  inline VDVResponse() : VDVResponse(nullptr) {}
  virtual ~VDVResponse();
  explicit constexpr VDVResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VDVResponse(const VDVResponse& from);
  VDVResponse(VDVResponse&& from) noexcept
    : VDVResponse() {
    *this = ::std::move(from);
  }

  inline VDVResponse& operator=(const VDVResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline VDVResponse& operator=(VDVResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const VDVResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const VDVResponse* internal_default_instance() {
    return reinterpret_cast<const VDVResponse*>(
               &_VDVResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(VDVResponse& a, VDVResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(VDVResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VDVResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VDVResponse* New() const final {
    return CreateMaybeMessage<VDVResponse>(nullptr);
  }

  VDVResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VDVResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VDVResponse& from);
  void MergeFrom(const VDVResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VDVResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "comfortServiceAPI.v1.VDVResponse";
  }
  protected:
  explicit VDVResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_comfort_5fservice_5fapi_5fv1_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUnixTimeFieldNumber = 1,
    kWeightedAccelerationFieldNumber = 2,
  };
  // repeated double unix_time = 1;
  int unix_time_size() const;
  private:
  int _internal_unix_time_size() const;
  public:
  void clear_unix_time();
  private:
  double _internal_unix_time(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_unix_time() const;
  void _internal_add_unix_time(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_unix_time();
  public:
  double unix_time(int index) const;
  void set_unix_time(int index, double value);
  void add_unix_time(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      unix_time() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_unix_time();

  // repeated float weightedAcceleration = 2;
  int weightedacceleration_size() const;
  private:
  int _internal_weightedacceleration_size() const;
  public:
  void clear_weightedacceleration();
  private:
  float _internal_weightedacceleration(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_weightedacceleration() const;
  void _internal_add_weightedacceleration(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_weightedacceleration();
  public:
  float weightedacceleration(int index) const;
  void set_weightedacceleration(int index, float value);
  void add_weightedacceleration(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      weightedacceleration() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_weightedacceleration();

  // @@protoc_insertion_point(class_scope:comfortServiceAPI.v1.VDVResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > unix_time_;
  mutable std::atomic<int> _unix_time_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > weightedacceleration_;
  mutable std::atomic<int> _weightedacceleration_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_comfort_5fservice_5fapi_5fv1_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ComfortRequest

// repeated double unix_time = 1;
inline int ComfortRequest::_internal_unix_time_size() const {
  return unix_time_.size();
}
inline int ComfortRequest::unix_time_size() const {
  return _internal_unix_time_size();
}
inline void ComfortRequest::clear_unix_time() {
  unix_time_.Clear();
}
inline double ComfortRequest::_internal_unix_time(int index) const {
  return unix_time_.Get(index);
}
inline double ComfortRequest::unix_time(int index) const {
  // @@protoc_insertion_point(field_get:comfortServiceAPI.v1.ComfortRequest.unix_time)
  return _internal_unix_time(index);
}
inline void ComfortRequest::set_unix_time(int index, double value) {
  unix_time_.Set(index, value);
  // @@protoc_insertion_point(field_set:comfortServiceAPI.v1.ComfortRequest.unix_time)
}
inline void ComfortRequest::_internal_add_unix_time(double value) {
  unix_time_.Add(value);
}
inline void ComfortRequest::add_unix_time(double value) {
  _internal_add_unix_time(value);
  // @@protoc_insertion_point(field_add:comfortServiceAPI.v1.ComfortRequest.unix_time)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
ComfortRequest::_internal_unix_time() const {
  return unix_time_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
ComfortRequest::unix_time() const {
  // @@protoc_insertion_point(field_list:comfortServiceAPI.v1.ComfortRequest.unix_time)
  return _internal_unix_time();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
ComfortRequest::_internal_mutable_unix_time() {
  return &unix_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
ComfortRequest::mutable_unix_time() {
  // @@protoc_insertion_point(field_mutable_list:comfortServiceAPI.v1.ComfortRequest.unix_time)
  return _internal_mutable_unix_time();
}

// repeated float humanWeightedVibrationX = 2;
inline int ComfortRequest::_internal_humanweightedvibrationx_size() const {
  return humanweightedvibrationx_.size();
}
inline int ComfortRequest::humanweightedvibrationx_size() const {
  return _internal_humanweightedvibrationx_size();
}
inline void ComfortRequest::clear_humanweightedvibrationx() {
  humanweightedvibrationx_.Clear();
}
inline float ComfortRequest::_internal_humanweightedvibrationx(int index) const {
  return humanweightedvibrationx_.Get(index);
}
inline float ComfortRequest::humanweightedvibrationx(int index) const {
  // @@protoc_insertion_point(field_get:comfortServiceAPI.v1.ComfortRequest.humanWeightedVibrationX)
  return _internal_humanweightedvibrationx(index);
}
inline void ComfortRequest::set_humanweightedvibrationx(int index, float value) {
  humanweightedvibrationx_.Set(index, value);
  // @@protoc_insertion_point(field_set:comfortServiceAPI.v1.ComfortRequest.humanWeightedVibrationX)
}
inline void ComfortRequest::_internal_add_humanweightedvibrationx(float value) {
  humanweightedvibrationx_.Add(value);
}
inline void ComfortRequest::add_humanweightedvibrationx(float value) {
  _internal_add_humanweightedvibrationx(value);
  // @@protoc_insertion_point(field_add:comfortServiceAPI.v1.ComfortRequest.humanWeightedVibrationX)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
ComfortRequest::_internal_humanweightedvibrationx() const {
  return humanweightedvibrationx_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
ComfortRequest::humanweightedvibrationx() const {
  // @@protoc_insertion_point(field_list:comfortServiceAPI.v1.ComfortRequest.humanWeightedVibrationX)
  return _internal_humanweightedvibrationx();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
ComfortRequest::_internal_mutable_humanweightedvibrationx() {
  return &humanweightedvibrationx_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
ComfortRequest::mutable_humanweightedvibrationx() {
  // @@protoc_insertion_point(field_mutable_list:comfortServiceAPI.v1.ComfortRequest.humanWeightedVibrationX)
  return _internal_mutable_humanweightedvibrationx();
}

// repeated float humanWeightedVibrationY = 3;
inline int ComfortRequest::_internal_humanweightedvibrationy_size() const {
  return humanweightedvibrationy_.size();
}
inline int ComfortRequest::humanweightedvibrationy_size() const {
  return _internal_humanweightedvibrationy_size();
}
inline void ComfortRequest::clear_humanweightedvibrationy() {
  humanweightedvibrationy_.Clear();
}
inline float ComfortRequest::_internal_humanweightedvibrationy(int index) const {
  return humanweightedvibrationy_.Get(index);
}
inline float ComfortRequest::humanweightedvibrationy(int index) const {
  // @@protoc_insertion_point(field_get:comfortServiceAPI.v1.ComfortRequest.humanWeightedVibrationY)
  return _internal_humanweightedvibrationy(index);
}
inline void ComfortRequest::set_humanweightedvibrationy(int index, float value) {
  humanweightedvibrationy_.Set(index, value);
  // @@protoc_insertion_point(field_set:comfortServiceAPI.v1.ComfortRequest.humanWeightedVibrationY)
}
inline void ComfortRequest::_internal_add_humanweightedvibrationy(float value) {
  humanweightedvibrationy_.Add(value);
}
inline void ComfortRequest::add_humanweightedvibrationy(float value) {
  _internal_add_humanweightedvibrationy(value);
  // @@protoc_insertion_point(field_add:comfortServiceAPI.v1.ComfortRequest.humanWeightedVibrationY)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
ComfortRequest::_internal_humanweightedvibrationy() const {
  return humanweightedvibrationy_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
ComfortRequest::humanweightedvibrationy() const {
  // @@protoc_insertion_point(field_list:comfortServiceAPI.v1.ComfortRequest.humanWeightedVibrationY)
  return _internal_humanweightedvibrationy();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
ComfortRequest::_internal_mutable_humanweightedvibrationy() {
  return &humanweightedvibrationy_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
ComfortRequest::mutable_humanweightedvibrationy() {
  // @@protoc_insertion_point(field_mutable_list:comfortServiceAPI.v1.ComfortRequest.humanWeightedVibrationY)
  return _internal_mutable_humanweightedvibrationy();
}

// repeated float humanWeightedVibrationZ = 4;
inline int ComfortRequest::_internal_humanweightedvibrationz_size() const {
  return humanweightedvibrationz_.size();
}
inline int ComfortRequest::humanweightedvibrationz_size() const {
  return _internal_humanweightedvibrationz_size();
}
inline void ComfortRequest::clear_humanweightedvibrationz() {
  humanweightedvibrationz_.Clear();
}
inline float ComfortRequest::_internal_humanweightedvibrationz(int index) const {
  return humanweightedvibrationz_.Get(index);
}
inline float ComfortRequest::humanweightedvibrationz(int index) const {
  // @@protoc_insertion_point(field_get:comfortServiceAPI.v1.ComfortRequest.humanWeightedVibrationZ)
  return _internal_humanweightedvibrationz(index);
}
inline void ComfortRequest::set_humanweightedvibrationz(int index, float value) {
  humanweightedvibrationz_.Set(index, value);
  // @@protoc_insertion_point(field_set:comfortServiceAPI.v1.ComfortRequest.humanWeightedVibrationZ)
}
inline void ComfortRequest::_internal_add_humanweightedvibrationz(float value) {
  humanweightedvibrationz_.Add(value);
}
inline void ComfortRequest::add_humanweightedvibrationz(float value) {
  _internal_add_humanweightedvibrationz(value);
  // @@protoc_insertion_point(field_add:comfortServiceAPI.v1.ComfortRequest.humanWeightedVibrationZ)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
ComfortRequest::_internal_humanweightedvibrationz() const {
  return humanweightedvibrationz_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
ComfortRequest::humanweightedvibrationz() const {
  // @@protoc_insertion_point(field_list:comfortServiceAPI.v1.ComfortRequest.humanWeightedVibrationZ)
  return _internal_humanweightedvibrationz();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
ComfortRequest::_internal_mutable_humanweightedvibrationz() {
  return &humanweightedvibrationz_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
ComfortRequest::mutable_humanweightedvibrationz() {
  // @@protoc_insertion_point(field_mutable_list:comfortServiceAPI.v1.ComfortRequest.humanWeightedVibrationZ)
  return _internal_mutable_humanweightedvibrationz();
}

// -------------------------------------------------------------------

// ComfortResponse

// repeated double unix_time = 1;
inline int ComfortResponse::_internal_unix_time_size() const {
  return unix_time_.size();
}
inline int ComfortResponse::unix_time_size() const {
  return _internal_unix_time_size();
}
inline void ComfortResponse::clear_unix_time() {
  unix_time_.Clear();
}
inline double ComfortResponse::_internal_unix_time(int index) const {
  return unix_time_.Get(index);
}
inline double ComfortResponse::unix_time(int index) const {
  // @@protoc_insertion_point(field_get:comfortServiceAPI.v1.ComfortResponse.unix_time)
  return _internal_unix_time(index);
}
inline void ComfortResponse::set_unix_time(int index, double value) {
  unix_time_.Set(index, value);
  // @@protoc_insertion_point(field_set:comfortServiceAPI.v1.ComfortResponse.unix_time)
}
inline void ComfortResponse::_internal_add_unix_time(double value) {
  unix_time_.Add(value);
}
inline void ComfortResponse::add_unix_time(double value) {
  _internal_add_unix_time(value);
  // @@protoc_insertion_point(field_add:comfortServiceAPI.v1.ComfortResponse.unix_time)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
ComfortResponse::_internal_unix_time() const {
  return unix_time_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
ComfortResponse::unix_time() const {
  // @@protoc_insertion_point(field_list:comfortServiceAPI.v1.ComfortResponse.unix_time)
  return _internal_unix_time();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
ComfortResponse::_internal_mutable_unix_time() {
  return &unix_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
ComfortResponse::mutable_unix_time() {
  // @@protoc_insertion_point(field_mutable_list:comfortServiceAPI.v1.ComfortResponse.unix_time)
  return _internal_mutable_unix_time();
}

// string rating = 2;
inline void ComfortResponse::clear_rating() {
  rating_.ClearToEmpty();
}
inline const std::string& ComfortResponse::rating() const {
  // @@protoc_insertion_point(field_get:comfortServiceAPI.v1.ComfortResponse.rating)
  return _internal_rating();
}
inline void ComfortResponse::set_rating(const std::string& value) {
  _internal_set_rating(value);
  // @@protoc_insertion_point(field_set:comfortServiceAPI.v1.ComfortResponse.rating)
}
inline std::string* ComfortResponse::mutable_rating() {
  // @@protoc_insertion_point(field_mutable:comfortServiceAPI.v1.ComfortResponse.rating)
  return _internal_mutable_rating();
}
inline const std::string& ComfortResponse::_internal_rating() const {
  return rating_.Get();
}
inline void ComfortResponse::_internal_set_rating(const std::string& value) {
  
  rating_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ComfortResponse::set_rating(std::string&& value) {
  
  rating_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:comfortServiceAPI.v1.ComfortResponse.rating)
}
inline void ComfortResponse::set_rating(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  rating_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:comfortServiceAPI.v1.ComfortResponse.rating)
}
inline void ComfortResponse::set_rating(const char* value,
    size_t size) {
  
  rating_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:comfortServiceAPI.v1.ComfortResponse.rating)
}
inline std::string* ComfortResponse::_internal_mutable_rating() {
  
  return rating_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ComfortResponse::release_rating() {
  // @@protoc_insertion_point(field_release:comfortServiceAPI.v1.ComfortResponse.rating)
  return rating_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ComfortResponse::set_allocated_rating(std::string* rating) {
  if (rating != nullptr) {
    
  } else {
    
  }
  rating_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rating,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:comfortServiceAPI.v1.ComfortResponse.rating)
}

// string percentageMaxRating = 3;
inline bool ComfortResponse::_internal_has_percentagemaxrating() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ComfortResponse::has_percentagemaxrating() const {
  return _internal_has_percentagemaxrating();
}
inline void ComfortResponse::clear_percentagemaxrating() {
  percentagemaxrating_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ComfortResponse::percentagemaxrating() const {
  // @@protoc_insertion_point(field_get:comfortServiceAPI.v1.ComfortResponse.percentageMaxRating)
  return _internal_percentagemaxrating();
}
inline void ComfortResponse::set_percentagemaxrating(const std::string& value) {
  _internal_set_percentagemaxrating(value);
  // @@protoc_insertion_point(field_set:comfortServiceAPI.v1.ComfortResponse.percentageMaxRating)
}
inline std::string* ComfortResponse::mutable_percentagemaxrating() {
  // @@protoc_insertion_point(field_mutable:comfortServiceAPI.v1.ComfortResponse.percentageMaxRating)
  return _internal_mutable_percentagemaxrating();
}
inline const std::string& ComfortResponse::_internal_percentagemaxrating() const {
  return percentagemaxrating_.Get();
}
inline void ComfortResponse::_internal_set_percentagemaxrating(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  percentagemaxrating_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ComfortResponse::set_percentagemaxrating(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  percentagemaxrating_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:comfortServiceAPI.v1.ComfortResponse.percentageMaxRating)
}
inline void ComfortResponse::set_percentagemaxrating(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  percentagemaxrating_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:comfortServiceAPI.v1.ComfortResponse.percentageMaxRating)
}
inline void ComfortResponse::set_percentagemaxrating(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  percentagemaxrating_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:comfortServiceAPI.v1.ComfortResponse.percentageMaxRating)
}
inline std::string* ComfortResponse::_internal_mutable_percentagemaxrating() {
  _has_bits_[0] |= 0x00000001u;
  return percentagemaxrating_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ComfortResponse::release_percentagemaxrating() {
  // @@protoc_insertion_point(field_release:comfortServiceAPI.v1.ComfortResponse.percentageMaxRating)
  if (!_internal_has_percentagemaxrating()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return percentagemaxrating_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ComfortResponse::set_allocated_percentagemaxrating(std::string* percentagemaxrating) {
  if (percentagemaxrating != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  percentagemaxrating_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), percentagemaxrating,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:comfortServiceAPI.v1.ComfortResponse.percentageMaxRating)
}

// -------------------------------------------------------------------

// VDVRequest

// repeated double unix_time = 1;
inline int VDVRequest::_internal_unix_time_size() const {
  return unix_time_.size();
}
inline int VDVRequest::unix_time_size() const {
  return _internal_unix_time_size();
}
inline void VDVRequest::clear_unix_time() {
  unix_time_.Clear();
}
inline double VDVRequest::_internal_unix_time(int index) const {
  return unix_time_.Get(index);
}
inline double VDVRequest::unix_time(int index) const {
  // @@protoc_insertion_point(field_get:comfortServiceAPI.v1.VDVRequest.unix_time)
  return _internal_unix_time(index);
}
inline void VDVRequest::set_unix_time(int index, double value) {
  unix_time_.Set(index, value);
  // @@protoc_insertion_point(field_set:comfortServiceAPI.v1.VDVRequest.unix_time)
}
inline void VDVRequest::_internal_add_unix_time(double value) {
  unix_time_.Add(value);
}
inline void VDVRequest::add_unix_time(double value) {
  _internal_add_unix_time(value);
  // @@protoc_insertion_point(field_add:comfortServiceAPI.v1.VDVRequest.unix_time)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
VDVRequest::_internal_unix_time() const {
  return unix_time_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
VDVRequest::unix_time() const {
  // @@protoc_insertion_point(field_list:comfortServiceAPI.v1.VDVRequest.unix_time)
  return _internal_unix_time();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
VDVRequest::_internal_mutable_unix_time() {
  return &unix_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
VDVRequest::mutable_unix_time() {
  // @@protoc_insertion_point(field_mutable_list:comfortServiceAPI.v1.VDVRequest.unix_time)
  return _internal_mutable_unix_time();
}

// repeated float weightedAcceleration = 2;
inline int VDVRequest::_internal_weightedacceleration_size() const {
  return weightedacceleration_.size();
}
inline int VDVRequest::weightedacceleration_size() const {
  return _internal_weightedacceleration_size();
}
inline void VDVRequest::clear_weightedacceleration() {
  weightedacceleration_.Clear();
}
inline float VDVRequest::_internal_weightedacceleration(int index) const {
  return weightedacceleration_.Get(index);
}
inline float VDVRequest::weightedacceleration(int index) const {
  // @@protoc_insertion_point(field_get:comfortServiceAPI.v1.VDVRequest.weightedAcceleration)
  return _internal_weightedacceleration(index);
}
inline void VDVRequest::set_weightedacceleration(int index, float value) {
  weightedacceleration_.Set(index, value);
  // @@protoc_insertion_point(field_set:comfortServiceAPI.v1.VDVRequest.weightedAcceleration)
}
inline void VDVRequest::_internal_add_weightedacceleration(float value) {
  weightedacceleration_.Add(value);
}
inline void VDVRequest::add_weightedacceleration(float value) {
  _internal_add_weightedacceleration(value);
  // @@protoc_insertion_point(field_add:comfortServiceAPI.v1.VDVRequest.weightedAcceleration)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
VDVRequest::_internal_weightedacceleration() const {
  return weightedacceleration_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
VDVRequest::weightedacceleration() const {
  // @@protoc_insertion_point(field_list:comfortServiceAPI.v1.VDVRequest.weightedAcceleration)
  return _internal_weightedacceleration();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
VDVRequest::_internal_mutable_weightedacceleration() {
  return &weightedacceleration_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
VDVRequest::mutable_weightedacceleration() {
  // @@protoc_insertion_point(field_mutable_list:comfortServiceAPI.v1.VDVRequest.weightedAcceleration)
  return _internal_mutable_weightedacceleration();
}

// -------------------------------------------------------------------

// VDVResponse

// repeated double unix_time = 1;
inline int VDVResponse::_internal_unix_time_size() const {
  return unix_time_.size();
}
inline int VDVResponse::unix_time_size() const {
  return _internal_unix_time_size();
}
inline void VDVResponse::clear_unix_time() {
  unix_time_.Clear();
}
inline double VDVResponse::_internal_unix_time(int index) const {
  return unix_time_.Get(index);
}
inline double VDVResponse::unix_time(int index) const {
  // @@protoc_insertion_point(field_get:comfortServiceAPI.v1.VDVResponse.unix_time)
  return _internal_unix_time(index);
}
inline void VDVResponse::set_unix_time(int index, double value) {
  unix_time_.Set(index, value);
  // @@protoc_insertion_point(field_set:comfortServiceAPI.v1.VDVResponse.unix_time)
}
inline void VDVResponse::_internal_add_unix_time(double value) {
  unix_time_.Add(value);
}
inline void VDVResponse::add_unix_time(double value) {
  _internal_add_unix_time(value);
  // @@protoc_insertion_point(field_add:comfortServiceAPI.v1.VDVResponse.unix_time)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
VDVResponse::_internal_unix_time() const {
  return unix_time_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
VDVResponse::unix_time() const {
  // @@protoc_insertion_point(field_list:comfortServiceAPI.v1.VDVResponse.unix_time)
  return _internal_unix_time();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
VDVResponse::_internal_mutable_unix_time() {
  return &unix_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
VDVResponse::mutable_unix_time() {
  // @@protoc_insertion_point(field_mutable_list:comfortServiceAPI.v1.VDVResponse.unix_time)
  return _internal_mutable_unix_time();
}

// repeated float weightedAcceleration = 2;
inline int VDVResponse::_internal_weightedacceleration_size() const {
  return weightedacceleration_.size();
}
inline int VDVResponse::weightedacceleration_size() const {
  return _internal_weightedacceleration_size();
}
inline void VDVResponse::clear_weightedacceleration() {
  weightedacceleration_.Clear();
}
inline float VDVResponse::_internal_weightedacceleration(int index) const {
  return weightedacceleration_.Get(index);
}
inline float VDVResponse::weightedacceleration(int index) const {
  // @@protoc_insertion_point(field_get:comfortServiceAPI.v1.VDVResponse.weightedAcceleration)
  return _internal_weightedacceleration(index);
}
inline void VDVResponse::set_weightedacceleration(int index, float value) {
  weightedacceleration_.Set(index, value);
  // @@protoc_insertion_point(field_set:comfortServiceAPI.v1.VDVResponse.weightedAcceleration)
}
inline void VDVResponse::_internal_add_weightedacceleration(float value) {
  weightedacceleration_.Add(value);
}
inline void VDVResponse::add_weightedacceleration(float value) {
  _internal_add_weightedacceleration(value);
  // @@protoc_insertion_point(field_add:comfortServiceAPI.v1.VDVResponse.weightedAcceleration)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
VDVResponse::_internal_weightedacceleration() const {
  return weightedacceleration_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
VDVResponse::weightedacceleration() const {
  // @@protoc_insertion_point(field_list:comfortServiceAPI.v1.VDVResponse.weightedAcceleration)
  return _internal_weightedacceleration();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
VDVResponse::_internal_mutable_weightedacceleration() {
  return &weightedacceleration_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
VDVResponse::mutable_weightedacceleration() {
  // @@protoc_insertion_point(field_mutable_list:comfortServiceAPI.v1.VDVResponse.weightedAcceleration)
  return _internal_mutable_weightedacceleration();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace comfortServiceAPI

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_comfort_5fservice_5fapi_5fv1_2eproto
