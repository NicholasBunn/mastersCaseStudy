// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: comfort_service_api_v1.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_comfort_5fservice_5fapi_5fv1_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_comfort_5fservice_5fapi_5fv1_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015008 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_comfort_5fservice_5fapi_5fv1_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_comfort_5fservice_5fapi_5fv1_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_comfort_5fservice_5fapi_5fv1_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_comfort_5fservice_5fapi_5fv1_2eproto_metadata_getter(int index);
namespace comfortServiceAPI {
namespace v1 {
class ComfortRequest;
struct ComfortRequestDefaultTypeInternal;
extern ComfortRequestDefaultTypeInternal _ComfortRequest_default_instance_;
class ComfortResponse;
struct ComfortResponseDefaultTypeInternal;
extern ComfortResponseDefaultTypeInternal _ComfortResponse_default_instance_;
}  // namespace v1
}  // namespace comfortServiceAPI
PROTOBUF_NAMESPACE_OPEN
template<> ::comfortServiceAPI::v1::ComfortRequest* Arena::CreateMaybeMessage<::comfortServiceAPI::v1::ComfortRequest>(Arena*);
template<> ::comfortServiceAPI::v1::ComfortResponse* Arena::CreateMaybeMessage<::comfortServiceAPI::v1::ComfortResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace comfortServiceAPI {
namespace v1 {

enum HabitibilityRating : int {
  UNKNOWN_RATING = 0,
  NOT_UNCOMFORTABLE = 1,
  SLIGHTLY_UNCOMFORTABLE = 2,
  FAIRLY_UNCOMFORTABLE = 3,
  UNCOMFORTABLE = 4,
  VERY_UNCOMFORTABLE = 5,
  EXTREMELY_UNCOMFORTABLE = 6,
  HabitibilityRating_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  HabitibilityRating_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool HabitibilityRating_IsValid(int value);
constexpr HabitibilityRating HabitibilityRating_MIN = UNKNOWN_RATING;
constexpr HabitibilityRating HabitibilityRating_MAX = EXTREMELY_UNCOMFORTABLE;
constexpr int HabitibilityRating_ARRAYSIZE = HabitibilityRating_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* HabitibilityRating_descriptor();
template<typename T>
inline const std::string& HabitibilityRating_Name(T enum_t_value) {
  static_assert(::std::is_same<T, HabitibilityRating>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function HabitibilityRating_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    HabitibilityRating_descriptor(), enum_t_value);
}
inline bool HabitibilityRating_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, HabitibilityRating* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<HabitibilityRating>(
    HabitibilityRating_descriptor(), name, value);
}
// ===================================================================

class ComfortRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:comfortServiceAPI.v1.ComfortRequest) */ {
 public:
  inline ComfortRequest() : ComfortRequest(nullptr) {}
  virtual ~ComfortRequest();
  explicit constexpr ComfortRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ComfortRequest(const ComfortRequest& from);
  ComfortRequest(ComfortRequest&& from) noexcept
    : ComfortRequest() {
    *this = ::std::move(from);
  }

  inline ComfortRequest& operator=(const ComfortRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ComfortRequest& operator=(ComfortRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ComfortRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ComfortRequest* internal_default_instance() {
    return reinterpret_cast<const ComfortRequest*>(
               &_ComfortRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ComfortRequest& a, ComfortRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ComfortRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ComfortRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ComfortRequest* New() const final {
    return CreateMaybeMessage<ComfortRequest>(nullptr);
  }

  ComfortRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ComfortRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ComfortRequest& from);
  void MergeFrom(const ComfortRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ComfortRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "comfortServiceAPI.v1.ComfortRequest";
  }
  protected:
  explicit ComfortRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_comfort_5fservice_5fapi_5fv1_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUnixTimeFieldNumber = 1,
    kHumanWeightedVibrationXFieldNumber = 2,
    kHumanWeightedVibrationYFieldNumber = 3,
    kHumanWeightedVibrationZFieldNumber = 4,
  };
  // repeated double unix_time = 1;
  int unix_time_size() const;
  private:
  int _internal_unix_time_size() const;
  public:
  void clear_unix_time();
  private:
  double _internal_unix_time(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_unix_time() const;
  void _internal_add_unix_time(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_unix_time();
  public:
  double unix_time(int index) const;
  void set_unix_time(int index, double value);
  void add_unix_time(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      unix_time() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_unix_time();

  // repeated double human_weighted_vibration_x = 2;
  int human_weighted_vibration_x_size() const;
  private:
  int _internal_human_weighted_vibration_x_size() const;
  public:
  void clear_human_weighted_vibration_x();
  private:
  double _internal_human_weighted_vibration_x(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_human_weighted_vibration_x() const;
  void _internal_add_human_weighted_vibration_x(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_human_weighted_vibration_x();
  public:
  double human_weighted_vibration_x(int index) const;
  void set_human_weighted_vibration_x(int index, double value);
  void add_human_weighted_vibration_x(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      human_weighted_vibration_x() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_human_weighted_vibration_x();

  // repeated double human_weighted_vibration_y = 3;
  int human_weighted_vibration_y_size() const;
  private:
  int _internal_human_weighted_vibration_y_size() const;
  public:
  void clear_human_weighted_vibration_y();
  private:
  double _internal_human_weighted_vibration_y(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_human_weighted_vibration_y() const;
  void _internal_add_human_weighted_vibration_y(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_human_weighted_vibration_y();
  public:
  double human_weighted_vibration_y(int index) const;
  void set_human_weighted_vibration_y(int index, double value);
  void add_human_weighted_vibration_y(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      human_weighted_vibration_y() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_human_weighted_vibration_y();

  // repeated double human_weighted_vibration_z = 4;
  int human_weighted_vibration_z_size() const;
  private:
  int _internal_human_weighted_vibration_z_size() const;
  public:
  void clear_human_weighted_vibration_z();
  private:
  double _internal_human_weighted_vibration_z(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_human_weighted_vibration_z() const;
  void _internal_add_human_weighted_vibration_z(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_human_weighted_vibration_z();
  public:
  double human_weighted_vibration_z(int index) const;
  void set_human_weighted_vibration_z(int index, double value);
  void add_human_weighted_vibration_z(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      human_weighted_vibration_z() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_human_weighted_vibration_z();

  // @@protoc_insertion_point(class_scope:comfortServiceAPI.v1.ComfortRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > unix_time_;
  mutable std::atomic<int> _unix_time_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > human_weighted_vibration_x_;
  mutable std::atomic<int> _human_weighted_vibration_x_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > human_weighted_vibration_y_;
  mutable std::atomic<int> _human_weighted_vibration_y_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > human_weighted_vibration_z_;
  mutable std::atomic<int> _human_weighted_vibration_z_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_comfort_5fservice_5fapi_5fv1_2eproto;
};
// -------------------------------------------------------------------

class ComfortResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:comfortServiceAPI.v1.ComfortResponse) */ {
 public:
  inline ComfortResponse() : ComfortResponse(nullptr) {}
  virtual ~ComfortResponse();
  explicit constexpr ComfortResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ComfortResponse(const ComfortResponse& from);
  ComfortResponse(ComfortResponse&& from) noexcept
    : ComfortResponse() {
    *this = ::std::move(from);
  }

  inline ComfortResponse& operator=(const ComfortResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ComfortResponse& operator=(ComfortResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ComfortResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ComfortResponse* internal_default_instance() {
    return reinterpret_cast<const ComfortResponse*>(
               &_ComfortResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ComfortResponse& a, ComfortResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ComfortResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ComfortResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ComfortResponse* New() const final {
    return CreateMaybeMessage<ComfortResponse>(nullptr);
  }

  ComfortResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ComfortResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ComfortResponse& from);
  void MergeFrom(const ComfortResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ComfortResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "comfortServiceAPI.v1.ComfortResponse";
  }
  protected:
  explicit ComfortResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_comfort_5fservice_5fapi_5fv1_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUnixTimeFieldNumber = 1,
    kRatingFieldNumber = 2,
  };
  // repeated double unix_time = 1;
  int unix_time_size() const;
  private:
  int _internal_unix_time_size() const;
  public:
  void clear_unix_time();
  private:
  double _internal_unix_time(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_unix_time() const;
  void _internal_add_unix_time(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_unix_time();
  public:
  double unix_time(int index) const;
  void set_unix_time(int index, double value);
  void add_unix_time(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      unix_time() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_unix_time();

  // .comfortServiceAPI.v1.HabitibilityRating rating = 2;
  void clear_rating();
  ::comfortServiceAPI::v1::HabitibilityRating rating() const;
  void set_rating(::comfortServiceAPI::v1::HabitibilityRating value);
  private:
  ::comfortServiceAPI::v1::HabitibilityRating _internal_rating() const;
  void _internal_set_rating(::comfortServiceAPI::v1::HabitibilityRating value);
  public:

  // @@protoc_insertion_point(class_scope:comfortServiceAPI.v1.ComfortResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > unix_time_;
  mutable std::atomic<int> _unix_time_cached_byte_size_;
  int rating_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_comfort_5fservice_5fapi_5fv1_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ComfortRequest

// repeated double unix_time = 1;
inline int ComfortRequest::_internal_unix_time_size() const {
  return unix_time_.size();
}
inline int ComfortRequest::unix_time_size() const {
  return _internal_unix_time_size();
}
inline void ComfortRequest::clear_unix_time() {
  unix_time_.Clear();
}
inline double ComfortRequest::_internal_unix_time(int index) const {
  return unix_time_.Get(index);
}
inline double ComfortRequest::unix_time(int index) const {
  // @@protoc_insertion_point(field_get:comfortServiceAPI.v1.ComfortRequest.unix_time)
  return _internal_unix_time(index);
}
inline void ComfortRequest::set_unix_time(int index, double value) {
  unix_time_.Set(index, value);
  // @@protoc_insertion_point(field_set:comfortServiceAPI.v1.ComfortRequest.unix_time)
}
inline void ComfortRequest::_internal_add_unix_time(double value) {
  unix_time_.Add(value);
}
inline void ComfortRequest::add_unix_time(double value) {
  _internal_add_unix_time(value);
  // @@protoc_insertion_point(field_add:comfortServiceAPI.v1.ComfortRequest.unix_time)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
ComfortRequest::_internal_unix_time() const {
  return unix_time_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
ComfortRequest::unix_time() const {
  // @@protoc_insertion_point(field_list:comfortServiceAPI.v1.ComfortRequest.unix_time)
  return _internal_unix_time();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
ComfortRequest::_internal_mutable_unix_time() {
  return &unix_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
ComfortRequest::mutable_unix_time() {
  // @@protoc_insertion_point(field_mutable_list:comfortServiceAPI.v1.ComfortRequest.unix_time)
  return _internal_mutable_unix_time();
}

// repeated double human_weighted_vibration_x = 2;
inline int ComfortRequest::_internal_human_weighted_vibration_x_size() const {
  return human_weighted_vibration_x_.size();
}
inline int ComfortRequest::human_weighted_vibration_x_size() const {
  return _internal_human_weighted_vibration_x_size();
}
inline void ComfortRequest::clear_human_weighted_vibration_x() {
  human_weighted_vibration_x_.Clear();
}
inline double ComfortRequest::_internal_human_weighted_vibration_x(int index) const {
  return human_weighted_vibration_x_.Get(index);
}
inline double ComfortRequest::human_weighted_vibration_x(int index) const {
  // @@protoc_insertion_point(field_get:comfortServiceAPI.v1.ComfortRequest.human_weighted_vibration_x)
  return _internal_human_weighted_vibration_x(index);
}
inline void ComfortRequest::set_human_weighted_vibration_x(int index, double value) {
  human_weighted_vibration_x_.Set(index, value);
  // @@protoc_insertion_point(field_set:comfortServiceAPI.v1.ComfortRequest.human_weighted_vibration_x)
}
inline void ComfortRequest::_internal_add_human_weighted_vibration_x(double value) {
  human_weighted_vibration_x_.Add(value);
}
inline void ComfortRequest::add_human_weighted_vibration_x(double value) {
  _internal_add_human_weighted_vibration_x(value);
  // @@protoc_insertion_point(field_add:comfortServiceAPI.v1.ComfortRequest.human_weighted_vibration_x)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
ComfortRequest::_internal_human_weighted_vibration_x() const {
  return human_weighted_vibration_x_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
ComfortRequest::human_weighted_vibration_x() const {
  // @@protoc_insertion_point(field_list:comfortServiceAPI.v1.ComfortRequest.human_weighted_vibration_x)
  return _internal_human_weighted_vibration_x();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
ComfortRequest::_internal_mutable_human_weighted_vibration_x() {
  return &human_weighted_vibration_x_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
ComfortRequest::mutable_human_weighted_vibration_x() {
  // @@protoc_insertion_point(field_mutable_list:comfortServiceAPI.v1.ComfortRequest.human_weighted_vibration_x)
  return _internal_mutable_human_weighted_vibration_x();
}

// repeated double human_weighted_vibration_y = 3;
inline int ComfortRequest::_internal_human_weighted_vibration_y_size() const {
  return human_weighted_vibration_y_.size();
}
inline int ComfortRequest::human_weighted_vibration_y_size() const {
  return _internal_human_weighted_vibration_y_size();
}
inline void ComfortRequest::clear_human_weighted_vibration_y() {
  human_weighted_vibration_y_.Clear();
}
inline double ComfortRequest::_internal_human_weighted_vibration_y(int index) const {
  return human_weighted_vibration_y_.Get(index);
}
inline double ComfortRequest::human_weighted_vibration_y(int index) const {
  // @@protoc_insertion_point(field_get:comfortServiceAPI.v1.ComfortRequest.human_weighted_vibration_y)
  return _internal_human_weighted_vibration_y(index);
}
inline void ComfortRequest::set_human_weighted_vibration_y(int index, double value) {
  human_weighted_vibration_y_.Set(index, value);
  // @@protoc_insertion_point(field_set:comfortServiceAPI.v1.ComfortRequest.human_weighted_vibration_y)
}
inline void ComfortRequest::_internal_add_human_weighted_vibration_y(double value) {
  human_weighted_vibration_y_.Add(value);
}
inline void ComfortRequest::add_human_weighted_vibration_y(double value) {
  _internal_add_human_weighted_vibration_y(value);
  // @@protoc_insertion_point(field_add:comfortServiceAPI.v1.ComfortRequest.human_weighted_vibration_y)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
ComfortRequest::_internal_human_weighted_vibration_y() const {
  return human_weighted_vibration_y_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
ComfortRequest::human_weighted_vibration_y() const {
  // @@protoc_insertion_point(field_list:comfortServiceAPI.v1.ComfortRequest.human_weighted_vibration_y)
  return _internal_human_weighted_vibration_y();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
ComfortRequest::_internal_mutable_human_weighted_vibration_y() {
  return &human_weighted_vibration_y_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
ComfortRequest::mutable_human_weighted_vibration_y() {
  // @@protoc_insertion_point(field_mutable_list:comfortServiceAPI.v1.ComfortRequest.human_weighted_vibration_y)
  return _internal_mutable_human_weighted_vibration_y();
}

// repeated double human_weighted_vibration_z = 4;
inline int ComfortRequest::_internal_human_weighted_vibration_z_size() const {
  return human_weighted_vibration_z_.size();
}
inline int ComfortRequest::human_weighted_vibration_z_size() const {
  return _internal_human_weighted_vibration_z_size();
}
inline void ComfortRequest::clear_human_weighted_vibration_z() {
  human_weighted_vibration_z_.Clear();
}
inline double ComfortRequest::_internal_human_weighted_vibration_z(int index) const {
  return human_weighted_vibration_z_.Get(index);
}
inline double ComfortRequest::human_weighted_vibration_z(int index) const {
  // @@protoc_insertion_point(field_get:comfortServiceAPI.v1.ComfortRequest.human_weighted_vibration_z)
  return _internal_human_weighted_vibration_z(index);
}
inline void ComfortRequest::set_human_weighted_vibration_z(int index, double value) {
  human_weighted_vibration_z_.Set(index, value);
  // @@protoc_insertion_point(field_set:comfortServiceAPI.v1.ComfortRequest.human_weighted_vibration_z)
}
inline void ComfortRequest::_internal_add_human_weighted_vibration_z(double value) {
  human_weighted_vibration_z_.Add(value);
}
inline void ComfortRequest::add_human_weighted_vibration_z(double value) {
  _internal_add_human_weighted_vibration_z(value);
  // @@protoc_insertion_point(field_add:comfortServiceAPI.v1.ComfortRequest.human_weighted_vibration_z)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
ComfortRequest::_internal_human_weighted_vibration_z() const {
  return human_weighted_vibration_z_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
ComfortRequest::human_weighted_vibration_z() const {
  // @@protoc_insertion_point(field_list:comfortServiceAPI.v1.ComfortRequest.human_weighted_vibration_z)
  return _internal_human_weighted_vibration_z();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
ComfortRequest::_internal_mutable_human_weighted_vibration_z() {
  return &human_weighted_vibration_z_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
ComfortRequest::mutable_human_weighted_vibration_z() {
  // @@protoc_insertion_point(field_mutable_list:comfortServiceAPI.v1.ComfortRequest.human_weighted_vibration_z)
  return _internal_mutable_human_weighted_vibration_z();
}

// -------------------------------------------------------------------

// ComfortResponse

// repeated double unix_time = 1;
inline int ComfortResponse::_internal_unix_time_size() const {
  return unix_time_.size();
}
inline int ComfortResponse::unix_time_size() const {
  return _internal_unix_time_size();
}
inline void ComfortResponse::clear_unix_time() {
  unix_time_.Clear();
}
inline double ComfortResponse::_internal_unix_time(int index) const {
  return unix_time_.Get(index);
}
inline double ComfortResponse::unix_time(int index) const {
  // @@protoc_insertion_point(field_get:comfortServiceAPI.v1.ComfortResponse.unix_time)
  return _internal_unix_time(index);
}
inline void ComfortResponse::set_unix_time(int index, double value) {
  unix_time_.Set(index, value);
  // @@protoc_insertion_point(field_set:comfortServiceAPI.v1.ComfortResponse.unix_time)
}
inline void ComfortResponse::_internal_add_unix_time(double value) {
  unix_time_.Add(value);
}
inline void ComfortResponse::add_unix_time(double value) {
  _internal_add_unix_time(value);
  // @@protoc_insertion_point(field_add:comfortServiceAPI.v1.ComfortResponse.unix_time)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
ComfortResponse::_internal_unix_time() const {
  return unix_time_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
ComfortResponse::unix_time() const {
  // @@protoc_insertion_point(field_list:comfortServiceAPI.v1.ComfortResponse.unix_time)
  return _internal_unix_time();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
ComfortResponse::_internal_mutable_unix_time() {
  return &unix_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
ComfortResponse::mutable_unix_time() {
  // @@protoc_insertion_point(field_mutable_list:comfortServiceAPI.v1.ComfortResponse.unix_time)
  return _internal_mutable_unix_time();
}

// .comfortServiceAPI.v1.HabitibilityRating rating = 2;
inline void ComfortResponse::clear_rating() {
  rating_ = 0;
}
inline ::comfortServiceAPI::v1::HabitibilityRating ComfortResponse::_internal_rating() const {
  return static_cast< ::comfortServiceAPI::v1::HabitibilityRating >(rating_);
}
inline ::comfortServiceAPI::v1::HabitibilityRating ComfortResponse::rating() const {
  // @@protoc_insertion_point(field_get:comfortServiceAPI.v1.ComfortResponse.rating)
  return _internal_rating();
}
inline void ComfortResponse::_internal_set_rating(::comfortServiceAPI::v1::HabitibilityRating value) {
  
  rating_ = value;
}
inline void ComfortResponse::set_rating(::comfortServiceAPI::v1::HabitibilityRating value) {
  _internal_set_rating(value);
  // @@protoc_insertion_point(field_set:comfortServiceAPI.v1.ComfortResponse.rating)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace comfortServiceAPI

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::comfortServiceAPI::v1::HabitibilityRating> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::comfortServiceAPI::v1::HabitibilityRating>() {
  return ::comfortServiceAPI::v1::HabitibilityRating_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_comfort_5fservice_5fapi_5fv1_2eproto
