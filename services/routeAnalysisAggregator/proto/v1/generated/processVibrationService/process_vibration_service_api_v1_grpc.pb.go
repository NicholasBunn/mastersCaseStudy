// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package routeAnalysisAggregator

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ProcessVibrationServiceClient is the client API for ProcessVibrationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProcessVibrationServiceClient interface {
	// The 'Calculate RMS Series' call calculates the root mean square (RMS) vibration for individual time-series vibration signals.
	CalculateRMSSeries(ctx context.Context, in *ProcessRequest, opts ...grpc.CallOption) (*ProcessResponseSeries, error)
	// The 'Calculate RMS Batch' call calculates the root mean square (RMS) vibration for an "ensemble" value of a vibration signal time-series.
	CalculateRMSBatch(ctx context.Context, in *ProcessRequest, opts ...grpc.CallOption) (*ProcessResponseBatch, error)
}

type processVibrationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewProcessVibrationServiceClient(cc grpc.ClientConnInterface) ProcessVibrationServiceClient {
	return &processVibrationServiceClient{cc}
}

func (c *processVibrationServiceClient) CalculateRMSSeries(ctx context.Context, in *ProcessRequest, opts ...grpc.CallOption) (*ProcessResponseSeries, error) {
	out := new(ProcessResponseSeries)
	err := c.cc.Invoke(ctx, "/processVibrationServiceAPI.v1.ProcessVibrationService/CalculateRMSSeries", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *processVibrationServiceClient) CalculateRMSBatch(ctx context.Context, in *ProcessRequest, opts ...grpc.CallOption) (*ProcessResponseBatch, error) {
	out := new(ProcessResponseBatch)
	err := c.cc.Invoke(ctx, "/processVibrationServiceAPI.v1.ProcessVibrationService/CalculateRMSBatch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProcessVibrationServiceServer is the server API for ProcessVibrationService service.
// All implementations must embed UnimplementedProcessVibrationServiceServer
// for forward compatibility
type ProcessVibrationServiceServer interface {
	// The 'Calculate RMS Series' call calculates the root mean square (RMS) vibration for individual time-series vibration signals.
	CalculateRMSSeries(context.Context, *ProcessRequest) (*ProcessResponseSeries, error)
	// The 'Calculate RMS Batch' call calculates the root mean square (RMS) vibration for an "ensemble" value of a vibration signal time-series.
	CalculateRMSBatch(context.Context, *ProcessRequest) (*ProcessResponseBatch, error)
	mustEmbedUnimplementedProcessVibrationServiceServer()
}

// UnimplementedProcessVibrationServiceServer must be embedded to have forward compatible implementations.
type UnimplementedProcessVibrationServiceServer struct {
}

func (UnimplementedProcessVibrationServiceServer) CalculateRMSSeries(context.Context, *ProcessRequest) (*ProcessResponseSeries, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CalculateRMSSeries not implemented")
}
func (UnimplementedProcessVibrationServiceServer) CalculateRMSBatch(context.Context, *ProcessRequest) (*ProcessResponseBatch, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CalculateRMSBatch not implemented")
}
func (UnimplementedProcessVibrationServiceServer) mustEmbedUnimplementedProcessVibrationServiceServer() {
}

// UnsafeProcessVibrationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProcessVibrationServiceServer will
// result in compilation errors.
type UnsafeProcessVibrationServiceServer interface {
	mustEmbedUnimplementedProcessVibrationServiceServer()
}

func RegisterProcessVibrationServiceServer(s grpc.ServiceRegistrar, srv ProcessVibrationServiceServer) {
	s.RegisterService(&ProcessVibrationService_ServiceDesc, srv)
}

func _ProcessVibrationService_CalculateRMSSeries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProcessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProcessVibrationServiceServer).CalculateRMSSeries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/processVibrationServiceAPI.v1.ProcessVibrationService/CalculateRMSSeries",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProcessVibrationServiceServer).CalculateRMSSeries(ctx, req.(*ProcessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProcessVibrationService_CalculateRMSBatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProcessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProcessVibrationServiceServer).CalculateRMSBatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/processVibrationServiceAPI.v1.ProcessVibrationService/CalculateRMSBatch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProcessVibrationServiceServer).CalculateRMSBatch(ctx, req.(*ProcessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ProcessVibrationService_ServiceDesc is the grpc.ServiceDesc for ProcessVibrationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProcessVibrationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "processVibrationServiceAPI.v1.ProcessVibrationService",
	HandlerType: (*ProcessVibrationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CalculateRMSSeries",
			Handler:    _ProcessVibrationService_CalculateRMSSeries_Handler,
		},
		{
			MethodName: "CalculateRMSBatch",
			Handler:    _ProcessVibrationService_CalculateRMSBatch_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "processVibrationService/proto/v1/process_vibration_service_api_v1.proto",
}
