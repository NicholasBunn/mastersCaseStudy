// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package oceanWeatherService

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// OceanWeatherServiceClient is the client API for OceanWeatherService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OceanWeatherServiceClient interface {
	// The 'Ocean Weather Prediction' call provides foresight for tactical decision-making by providing future ocean weather conditions along a requested route
	OceanWeatherPrediction(ctx context.Context, in *OceanWeatherPredictionRequest, opts ...grpc.CallOption) (*OceanWeatherInformationResponse, error)
	// The 'OceanWeather History' call provides hindsight for stategic decision-making by providing historical ocean weather conditions that the ship would have encountered along a requested route
	OceanWeatherHistory(ctx context.Context, in *OceanWeatherHistoryRequest, opts ...grpc.CallOption) (*OceanWeatherInformationResponse, error)
}

type oceanWeatherServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOceanWeatherServiceClient(cc grpc.ClientConnInterface) OceanWeatherServiceClient {
	return &oceanWeatherServiceClient{cc}
}

func (c *oceanWeatherServiceClient) OceanWeatherPrediction(ctx context.Context, in *OceanWeatherPredictionRequest, opts ...grpc.CallOption) (*OceanWeatherInformationResponse, error) {
	out := new(OceanWeatherInformationResponse)
	err := c.cc.Invoke(ctx, "/oceanWeatherServiceAPI.v1.OceanWeatherService/OceanWeatherPrediction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oceanWeatherServiceClient) OceanWeatherHistory(ctx context.Context, in *OceanWeatherHistoryRequest, opts ...grpc.CallOption) (*OceanWeatherInformationResponse, error) {
	out := new(OceanWeatherInformationResponse)
	err := c.cc.Invoke(ctx, "/oceanWeatherServiceAPI.v1.OceanWeatherService/OceanWeatherHistory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OceanWeatherServiceServer is the server API for OceanWeatherService service.
// All implementations must embed UnimplementedOceanWeatherServiceServer
// for forward compatibility
type OceanWeatherServiceServer interface {
	// The 'Ocean Weather Prediction' call provides foresight for tactical decision-making by providing future ocean weather conditions along a requested route
	OceanWeatherPrediction(context.Context, *OceanWeatherPredictionRequest) (*OceanWeatherInformationResponse, error)
	// The 'OceanWeather History' call provides hindsight for stategic decision-making by providing historical ocean weather conditions that the ship would have encountered along a requested route
	OceanWeatherHistory(context.Context, *OceanWeatherHistoryRequest) (*OceanWeatherInformationResponse, error)
	mustEmbedUnimplementedOceanWeatherServiceServer()
}

// UnimplementedOceanWeatherServiceServer must be embedded to have forward compatible implementations.
type UnimplementedOceanWeatherServiceServer struct {
}

func (UnimplementedOceanWeatherServiceServer) OceanWeatherPrediction(context.Context, *OceanWeatherPredictionRequest) (*OceanWeatherInformationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OceanWeatherPrediction not implemented")
}
func (UnimplementedOceanWeatherServiceServer) OceanWeatherHistory(context.Context, *OceanWeatherHistoryRequest) (*OceanWeatherInformationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OceanWeatherHistory not implemented")
}
func (UnimplementedOceanWeatherServiceServer) mustEmbedUnimplementedOceanWeatherServiceServer() {}

// UnsafeOceanWeatherServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OceanWeatherServiceServer will
// result in compilation errors.
type UnsafeOceanWeatherServiceServer interface {
	mustEmbedUnimplementedOceanWeatherServiceServer()
}

func RegisterOceanWeatherServiceServer(s grpc.ServiceRegistrar, srv OceanWeatherServiceServer) {
	s.RegisterService(&OceanWeatherService_ServiceDesc, srv)
}

func _OceanWeatherService_OceanWeatherPrediction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OceanWeatherPredictionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OceanWeatherServiceServer).OceanWeatherPrediction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/oceanWeatherServiceAPI.v1.OceanWeatherService/OceanWeatherPrediction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OceanWeatherServiceServer).OceanWeatherPrediction(ctx, req.(*OceanWeatherPredictionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OceanWeatherService_OceanWeatherHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OceanWeatherHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OceanWeatherServiceServer).OceanWeatherHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/oceanWeatherServiceAPI.v1.OceanWeatherService/OceanWeatherHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OceanWeatherServiceServer).OceanWeatherHistory(ctx, req.(*OceanWeatherHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OceanWeatherService_ServiceDesc is the grpc.ServiceDesc for OceanWeatherService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OceanWeatherService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "oceanWeatherServiceAPI.v1.OceanWeatherService",
	HandlerType: (*OceanWeatherServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "OceanWeatherPrediction",
			Handler:    _OceanWeatherService_OceanWeatherPrediction_Handler,
		},
		{
			MethodName: "OceanWeatherHistory",
			Handler:    _OceanWeatherService_OceanWeatherHistory_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "oceanWeatherService/proto/v1/ocean_weather_service_api_v1.proto",
}
