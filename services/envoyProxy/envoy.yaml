static_resources:
  listeners:
    - name: listener_0
      address:
        socket_address: { address: 0.0.0.0, port_value: 10000 }
      filter_chains:
        - filters:
            - name: envoy.filters.network.http_connection_manager
              typed_config:
                "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
                codec_type: auto
                stat_prefix: ingress_http
                stream_idle_timeout: 0s
                route_config:
                  name: local_route
                  virtual_hosts:
                    - name: routing_service
                      domains: ["*"]
                      rate_limits:
                        - stage: 0
                          actions:
                            - generic_key:
                                descriptor_value: "global"
                      routes:
                        - {
                            match:
                              {
                                prefix: "/authenticationServiceAPI.v1.AuthenticationService",
                              },
                            route:
                              {
                                cluster: authentication_service,
                                timeout: 30s,
                                include_vh_rate_limits: true,
                              },
                          }
                        - {
                            match:
                              {
                                prefix: "/routeAnalysisAggregatorAPI.v1.AnalysisService",
                              },
                            route:
                              {
                                cluster: route_analysis_service,
                                timeout: 30s,
                                include_vh_rate_limits: true,
                              },
                          }
                        - {
                            match:
                              {
                                prefix: "/powerTrainAggregatorAPI.v1.PTEstimateService",
                              },
                            route:
                              {
                                cluster: power_train_service,
                                timeout: 80s,
                                include_vh_rate_limits: true,
                              },
                          }
                        - {
                            match:
                              {
                                prefix: "/vesselMotionAggregatorAPI.v1.VMEstimateService",
                              },
                            route:
                              {
                                cluster: vessel_motion_service,
                                timeout: 80s,
                                include_vh_rate_limits: true,
                              },
                          }
                        - {
                            match:
                              {
                                prefix: "/propellerMonitorService.v1.MonitorPropellerService",
                              },
                            route: {
                                cluster: propeller_monitor_service,
                                # include_vh_rate_limits: true,
                                max_grpc_timeout: 0s,
                              },
                          }
                      cors:
                        allow_origin_string_match:
                          - prefix: "*"
                        allow_methods: GET, PUT, DELETE, POST, OPTIONS
                        allow_headers: keep-alive,user-agent,cache-control,content-type,content-transfer-encoding,authorisation,x-accept-content-transfer-encoding, x-envoy-ratelimited, x-accept-response-streaming,x-user-agent,x-grpc-web,grpc-timeout
                        max_age: "1728000"
                        expose_headers: authorisation,grpc-status,grpc-message
                http_filters:
                  - name: envoy.filters.http.grpc_web
                  - name: envoy.filters.http.cors
                  - name: envoy.filters.http.ratelimit
                    typed_config:
                      "@type": type.googleapis.com/envoy.extensions.filters.http.ratelimit.v3.RateLimit
                      domain: apis
                      failure_mode_deny: true
                      request_type: both
                      stage: 0
                      rate_limited_as_resource_exhausted: true
                      enable_x_ratelimit_headers: DRAFT_VERSION_03
                      rate_limit_service:
                        grpc_service:
                          envoy_grpc:
                            cluster_name: ratelimit
                        transport_api_version: V3
                  - name: envoy.filters.http.router
          transport_socket:
            name: envoy.transport_sockets.tls
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.DownstreamTlsContext
              require_client_certificate: true
              common_tls_context:
                validation_context:
                  trusted_ca:
                    filename: ca-cert.pem
                  match_subject_alt_names:
                    - exact: localhost
                tls_certificates:
                  - certificate_chain:
                      filename: server-cert.pem
                    private_key:
                      filename: "server-key.pem"
  clusters:
    - name: authentication_service
      connect_timeout: 0.25s
      type: logical_dns
      http2_protocol_options: {}
      lb_policy: round_robin
      load_assignment:
        cluster_name: cluster_0
        endpoints:
          - lb_endpoints:
              - endpoint:
                  address:
                    socket_address:
                      address: authenticationservice #${AUTHENTICATIONHOST}
                      port_value: 50101
      # transport_socket:
      #   name: envoy.transport_sockets.tls
      #   typed_config:
      #     "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.UpstreamTlsContext
      #     common_tls_context:
      #       tls_certificates:
      #         - certificate_chain:
      #             filename: client-cert.pem
      #           private_key:
      #             filename: client-key.pem
    - name: route_analysis_service
      connect_timeout: 0.25s
      type: logical_dns
      http2_protocol_options: {}
      lb_policy: round_robin
      load_assignment:
        cluster_name: cluster_0
        endpoints:
          - lb_endpoints:
              - endpoint:
                  address:
                    socket_address:
                      address: routeanalysisaggregator #$ROUTEANALYSISHOST
                      port_value: 50100
    - name: power_train_service
      connect_timeout: 0.25s
      type: logical_dns
      http2_protocol_options: {}
      lb_policy: round_robin
      load_assignment:
        cluster_name: cluster_0
        endpoints:
          - lb_endpoints:
              - endpoint:
                  address:
                    socket_address:
                      address: powertrainaggregator #$POWERTRAINHOST
                      port_value: 50102
    - name: vessel_motion_service
      connect_timeout: 0.25s
      type: logical_dns
      http2_protocol_options: {}
      lb_policy: round_robin
      load_assignment:
        cluster_name: cluster_0
        endpoints:
          - lb_endpoints:
              - endpoint:
                  address:
                    socket_address:
                      address: vesselmotionaggregator #$VESSELMOTIONHOST
                      port_value: 50103
    - name: propeller_monitor_service
      connect_timeout: 0.25s
      type: logical_dns
      http2_protocol_options: {}
      lb_policy: round_robin
      load_assignment:
        cluster_name: cluster_0
        endpoints:
          - lb_endpoints:
              - endpoint:
                  address:
                    socket_address:
                      address: propellermonitorservice # 192.168.8.102 #$PMSHOST
                      port_value: 50055
    - name: ratelimit
      connect_timeout: 1s
      type: strict_dns
      http2_protocol_options: {}
      lb_policy: round_robin
      load_assignment:
        cluster_name: ratelimit
        endpoints:
          - lb_endpoints:
              - endpoint:
                  address:
                    socket_address:
                      address: ratelimit #$RLSHOST
                      port_value: 8081
admin:
  access_log_path: "/dev/null"
  address:
    socket_address:
      address: 0.0.0.0
      port_value: 10001
