syntax = "proto3";

package powerTrainService.v1;

// option go_package = "service/powerTrainService/proto/v1";

message PowerTrainEstimateRequest {
    repeated double unix_time = 1;
    repeated float port_prop_motor_speed = 2;
    repeated float stbd_prop_motor_speed = 3;
    repeated float propeller_pitch_port = 4;
    repeated float propeller_pitch_stbd = 5;
    repeated float sog = 6;
    repeated float wind_direction_relative = 7;
    repeated float wind_speed = 8;
    repeated float beaufort_number = 9;
    repeated float wave_direction = 10;
    repeated float wave_length = 11;
    ModelTypeEnum model_type = 12;
}

message PowerTrackingRequest {

}

message PowerEstimateResponse {
    repeated double unix_time = 1;
    repeated float power_estimate = 2;
}

message CostEstimateResponse {
    repeated double unix_time = 1;
    repeated float power_estimate = 2;
    repeated float cost_estimate = 3;
    float total_cost = 4;
}

message PowerEvaluationResponse {
    repeated double unix_time = 1;
    repeated float power_estimate = 2;
    repeated float power_actual = 3;
}

message PowerTrackingResponse {
    repeated float power_actual = 1;
}

// 'Power Train Service' offers four service calls that provide information about the power train of the vessel (namely power requirements and their assosciated costs)
service PowerTrainService {
    // The 'Power Estimate' call provides foresight for tactical decision-making by providing power estimates for a requested route and sailing conditions
    rpc PowerEstimate(PowerTrainEstimateRequest) returns (PowerEstimateResponse);
    // The 'Cost Estimate' call provides foresight for tactical decision-making by providing cost estimates for a requested route and sailing conditions
    rpc CostEstimate(PowerTrainEstimateRequest) returns (CostEstimateResponse);
    // The 'Power Tracking' call provides insight for tactical and operational decision-making by providing real-time power use by the vessel
    rpc PowerTracking(PowerTrackingRequest) returns (PowerTrackingResponse);
    // The 'Power Estimate Evaluation' call provdes hindsight for strategic decision-making by evaluating the accuracy of the models predictions
    rpc PowerEstimateEvaluation(PowerTrainEstimateRequest) returns (PowerEvaluationResponse);
}

enum ModelTypeEnum {
    UNKNOWN = 0;
    OPENWATER = 1;
    ICE = 2;
}