// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: proto/v1/vessel_motion_service_api_v1.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace vesselMotionService {
  /// <summary>
  /// 'Vessel Motion Service; offers three service calls that provide information about the vessel's motion in response to her sailing conditions (mainly regarding the high frequency component of the vessel's acceleration/vibration)
  /// </summary>
  public static partial class vesselMotionService
  {
    static readonly string __ServiceName = "vesselMotionService.v1.vesselMotionService";

    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    static readonly grpc::Marshaller<global::vesselMotionService.MotionEstimateRequest> __Marshaller_vesselMotionService_v1_MotionEstimateRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::vesselMotionService.MotionEstimateRequest.Parser));
    static readonly grpc::Marshaller<global::vesselMotionService.MotionEstimateResponse> __Marshaller_vesselMotionService_v1_MotionEstimateResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::vesselMotionService.MotionEstimateResponse.Parser));
    static readonly grpc::Marshaller<global::vesselMotionService.MotionTrackingRequest> __Marshaller_vesselMotionService_v1_MotionTrackingRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::vesselMotionService.MotionTrackingRequest.Parser));
    static readonly grpc::Marshaller<global::vesselMotionService.MotionTrackingResponse> __Marshaller_vesselMotionService_v1_MotionTrackingResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::vesselMotionService.MotionTrackingResponse.Parser));
    static readonly grpc::Marshaller<global::vesselMotionService.MotionEvaluationResponse> __Marshaller_vesselMotionService_v1_MotionEvaluationResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::vesselMotionService.MotionEvaluationResponse.Parser));

    static readonly grpc::Method<global::vesselMotionService.MotionEstimateRequest, global::vesselMotionService.MotionEstimateResponse> __Method_MotionEstimate = new grpc::Method<global::vesselMotionService.MotionEstimateRequest, global::vesselMotionService.MotionEstimateResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "MotionEstimate",
        __Marshaller_vesselMotionService_v1_MotionEstimateRequest,
        __Marshaller_vesselMotionService_v1_MotionEstimateResponse);

    static readonly grpc::Method<global::vesselMotionService.MotionTrackingRequest, global::vesselMotionService.MotionTrackingResponse> __Method_MotionTracking = new grpc::Method<global::vesselMotionService.MotionTrackingRequest, global::vesselMotionService.MotionTrackingResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "MotionTracking",
        __Marshaller_vesselMotionService_v1_MotionTrackingRequest,
        __Marshaller_vesselMotionService_v1_MotionTrackingResponse);

    static readonly grpc::Method<global::vesselMotionService.MotionEstimateRequest, global::vesselMotionService.MotionEvaluationResponse> __Method_MotionEstimateEvaluation = new grpc::Method<global::vesselMotionService.MotionEstimateRequest, global::vesselMotionService.MotionEvaluationResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "MotionEstimateEvaluation",
        __Marshaller_vesselMotionService_v1_MotionEstimateRequest,
        __Marshaller_vesselMotionService_v1_MotionEvaluationResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::vesselMotionService.VesselMotionServiceApiV1Reflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of vesselMotionService</summary>
    [grpc::BindServiceMethod(typeof(vesselMotionService), "BindService")]
    public abstract partial class vesselMotionServiceBase
    {
      /// <summary>
      /// The 'Motion Estimate' call provides foresight for tactical decision-making by providing high-frequency acceleration estimates for a requested sailing conditions at a requested location on the ship
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::vesselMotionService.MotionEstimateResponse> MotionEstimate(global::vesselMotionService.MotionEstimateRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// The 'Motion Tracking' call provides insight for tactical decision-making by providing real-time, high-frequency acceleration readings for a requested location on the ship
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::vesselMotionService.MotionTrackingResponse> MotionTracking(global::vesselMotionService.MotionTrackingRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// The 'Motion Estimation Evaluation' call provides hindsight for strategic decision-making by evaluating the accuracy of the models predictions
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::vesselMotionService.MotionEvaluationResponse> MotionEstimateEvaluation(global::vesselMotionService.MotionEstimateRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(vesselMotionServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_MotionEstimate, serviceImpl.MotionEstimate)
          .AddMethod(__Method_MotionTracking, serviceImpl.MotionTracking)
          .AddMethod(__Method_MotionEstimateEvaluation, serviceImpl.MotionEstimateEvaluation).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, vesselMotionServiceBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_MotionEstimate, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::vesselMotionService.MotionEstimateRequest, global::vesselMotionService.MotionEstimateResponse>(serviceImpl.MotionEstimate));
      serviceBinder.AddMethod(__Method_MotionTracking, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::vesselMotionService.MotionTrackingRequest, global::vesselMotionService.MotionTrackingResponse>(serviceImpl.MotionTracking));
      serviceBinder.AddMethod(__Method_MotionEstimateEvaluation, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::vesselMotionService.MotionEstimateRequest, global::vesselMotionService.MotionEvaluationResponse>(serviceImpl.MotionEstimateEvaluation));
    }

  }
}
#endregion
