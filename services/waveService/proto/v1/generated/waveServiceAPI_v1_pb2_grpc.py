# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import waveServiceAPI_v1_pb2 as waveServiceAPI__v1__pb2


class WaveServiceStub(object):
    """'Wave Service' offers two service calls that provide information about wave conditions for use in route planning.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.WaveEstimate = channel.unary_unary(
                '/waveServiceAPI.v1.WaveService/WaveEstimate',
                request_serializer=waveServiceAPI__v1__pb2.WaveInformationRequest.SerializeToString,
                response_deserializer=waveServiceAPI__v1__pb2.WaveInformationResponse.FromString,
                )
        self.WaveHistory = channel.unary_unary(
                '/waveServiceAPI.v1.WaveService/WaveHistory',
                request_serializer=waveServiceAPI__v1__pb2.WaveInformationRequest.SerializeToString,
                response_deserializer=waveServiceAPI__v1__pb2.WaveInformationResponse.FromString,
                )


class WaveServiceServicer(object):
    """'Wave Service' offers two service calls that provide information about wave conditions for use in route planning.
    """

    def WaveEstimate(self, request, context):
        """The 'Wave Estimate' call provides foresight for tactical decision-making by providing future wave conditions along a requested route
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def WaveHistory(self, request, context):
        """The 'Wave History' call provides hindsight for stategic decision-making by providing historical wave conditions that the ship would have encountered along a requested route
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_WaveServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'WaveEstimate': grpc.unary_unary_rpc_method_handler(
                    servicer.WaveEstimate,
                    request_deserializer=waveServiceAPI__v1__pb2.WaveInformationRequest.FromString,
                    response_serializer=waveServiceAPI__v1__pb2.WaveInformationResponse.SerializeToString,
            ),
            'WaveHistory': grpc.unary_unary_rpc_method_handler(
                    servicer.WaveHistory,
                    request_deserializer=waveServiceAPI__v1__pb2.WaveInformationRequest.FromString,
                    response_serializer=waveServiceAPI__v1__pb2.WaveInformationResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'waveServiceAPI.v1.WaveService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class WaveService(object):
    """'Wave Service' offers two service calls that provide information about wave conditions for use in route planning.
    """

    @staticmethod
    def WaveEstimate(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/waveServiceAPI.v1.WaveService/WaveEstimate',
            waveServiceAPI__v1__pb2.WaveInformationRequest.SerializeToString,
            waveServiceAPI__v1__pb2.WaveInformationResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def WaveHistory(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/waveServiceAPI.v1.WaveService/WaveHistory',
            waveServiceAPI__v1__pb2.WaveInformationRequest.SerializeToString,
            waveServiceAPI__v1__pb2.WaveInformationResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
