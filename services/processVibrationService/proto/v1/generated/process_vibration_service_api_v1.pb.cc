// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: process_vibration_service_api_v1.proto

#include "process_vibration_service_api_v1.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace processVibrationServiceAPI {
namespace v1 {
constexpr ProcessRequest::ProcessRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : unix_time_()
  , _unix_time_cached_byte_size_()
  , vibration_x_()
  , _vibration_x_cached_byte_size_()
  , vibration_y_()
  , _vibration_y_cached_byte_size_()
  , vibration_z_()
  , _vibration_z_cached_byte_size_(){}
struct ProcessRequestDefaultTypeInternal {
  constexpr ProcessRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ProcessRequestDefaultTypeInternal() {}
  union {
    ProcessRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ProcessRequestDefaultTypeInternal _ProcessRequest_default_instance_;
constexpr ProcessResponse::ProcessResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : unix_time_()
  , _unix_time_cached_byte_size_()
  , rms_vibration_x_()
  , _rms_vibration_x_cached_byte_size_()
  , rms_vibration_y_()
  , _rms_vibration_y_cached_byte_size_()
  , rms_vibration_z_()
  , _rms_vibration_z_cached_byte_size_()
  , vdv_vibration_x_()
  , _vdv_vibration_x_cached_byte_size_()
  , vdv_vibration_y_()
  , _vdv_vibration_y_cached_byte_size_()
  , vdv_vibration_z_()
  , _vdv_vibration_z_cached_byte_size_(){}
struct ProcessResponseDefaultTypeInternal {
  constexpr ProcessResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ProcessResponseDefaultTypeInternal() {}
  union {
    ProcessResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ProcessResponseDefaultTypeInternal _ProcessResponse_default_instance_;
}  // namespace v1
}  // namespace processVibrationServiceAPI
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_process_5fvibration_5fservice_5fapi_5fv1_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_process_5fvibration_5fservice_5fapi_5fv1_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_process_5fvibration_5fservice_5fapi_5fv1_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_process_5fvibration_5fservice_5fapi_5fv1_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::processVibrationServiceAPI::v1::ProcessRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::processVibrationServiceAPI::v1::ProcessRequest, unix_time_),
  PROTOBUF_FIELD_OFFSET(::processVibrationServiceAPI::v1::ProcessRequest, vibration_x_),
  PROTOBUF_FIELD_OFFSET(::processVibrationServiceAPI::v1::ProcessRequest, vibration_y_),
  PROTOBUF_FIELD_OFFSET(::processVibrationServiceAPI::v1::ProcessRequest, vibration_z_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::processVibrationServiceAPI::v1::ProcessResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::processVibrationServiceAPI::v1::ProcessResponse, unix_time_),
  PROTOBUF_FIELD_OFFSET(::processVibrationServiceAPI::v1::ProcessResponse, rms_vibration_x_),
  PROTOBUF_FIELD_OFFSET(::processVibrationServiceAPI::v1::ProcessResponse, rms_vibration_y_),
  PROTOBUF_FIELD_OFFSET(::processVibrationServiceAPI::v1::ProcessResponse, rms_vibration_z_),
  PROTOBUF_FIELD_OFFSET(::processVibrationServiceAPI::v1::ProcessResponse, vdv_vibration_x_),
  PROTOBUF_FIELD_OFFSET(::processVibrationServiceAPI::v1::ProcessResponse, vdv_vibration_y_),
  PROTOBUF_FIELD_OFFSET(::processVibrationServiceAPI::v1::ProcessResponse, vdv_vibration_z_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::processVibrationServiceAPI::v1::ProcessRequest)},
  { 9, -1, sizeof(::processVibrationServiceAPI::v1::ProcessResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::processVibrationServiceAPI::v1::_ProcessRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::processVibrationServiceAPI::v1::_ProcessResponse_default_instance_),
};

const char descriptor_table_protodef_process_5fvibration_5fservice_5fapi_5fv1_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n&process_vibration_service_api_v1.proto"
  "\022\035processVibrationServiceAPI.v1\"b\n\016Proce"
  "ssRequest\022\021\n\tunix_time\030\001 \003(\001\022\023\n\013vibratio"
  "n_x\030\002 \003(\002\022\023\n\013vibration_y\030\003 \003(\002\022\023\n\013vibrat"
  "ion_z\030\004 \003(\002\"\272\001\n\017ProcessResponse\022\021\n\tunix_"
  "time\030\001 \003(\001\022\027\n\017rms_vibration_x\030\002 \003(\002\022\027\n\017r"
  "ms_vibration_y\030\003 \003(\002\022\027\n\017rms_vibration_z\030"
  "\004 \003(\002\022\027\n\017VDV_vibration_x\030\005 \003(\002\022\027\n\017VDV_vi"
  "bration_y\030\006 \003(\002\022\027\n\017VDV_vibration_z\030\007 \003(\002"
  "2\376\001\n\027ProcessVibrationService\022q\n\020ProcessE"
  "stimates\022-.processVibrationServiceAPI.v1"
  ".ProcessRequest\032..processVibrationServic"
  "eAPI.v1.ProcessResponse\022p\n\017ProcessTracki"
  "ng\022-.processVibrationServiceAPI.v1.Proce"
  "ssRequest\032..processVibrationServiceAPI.v"
  "1.ProcessResponseb\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_process_5fvibration_5fservice_5fapi_5fv1_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_process_5fvibration_5fservice_5fapi_5fv1_2eproto = {
  false, false, 625, descriptor_table_protodef_process_5fvibration_5fservice_5fapi_5fv1_2eproto, "process_vibration_service_api_v1.proto", 
  &descriptor_table_process_5fvibration_5fservice_5fapi_5fv1_2eproto_once, nullptr, 0, 2,
  schemas, file_default_instances, TableStruct_process_5fvibration_5fservice_5fapi_5fv1_2eproto::offsets,
  file_level_metadata_process_5fvibration_5fservice_5fapi_5fv1_2eproto, file_level_enum_descriptors_process_5fvibration_5fservice_5fapi_5fv1_2eproto, file_level_service_descriptors_process_5fvibration_5fservice_5fapi_5fv1_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK ::PROTOBUF_NAMESPACE_ID::Metadata
descriptor_table_process_5fvibration_5fservice_5fapi_5fv1_2eproto_metadata_getter(int index) {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_process_5fvibration_5fservice_5fapi_5fv1_2eproto);
  return descriptor_table_process_5fvibration_5fservice_5fapi_5fv1_2eproto.file_level_metadata[index];
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_process_5fvibration_5fservice_5fapi_5fv1_2eproto(&descriptor_table_process_5fvibration_5fservice_5fapi_5fv1_2eproto);
namespace processVibrationServiceAPI {
namespace v1 {

// ===================================================================

class ProcessRequest::_Internal {
 public:
};

ProcessRequest::ProcessRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  unix_time_(arena),
  vibration_x_(arena),
  vibration_y_(arena),
  vibration_z_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:processVibrationServiceAPI.v1.ProcessRequest)
}
ProcessRequest::ProcessRequest(const ProcessRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      unix_time_(from.unix_time_),
      vibration_x_(from.vibration_x_),
      vibration_y_(from.vibration_y_),
      vibration_z_(from.vibration_z_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:processVibrationServiceAPI.v1.ProcessRequest)
}

void ProcessRequest::SharedCtor() {
}

ProcessRequest::~ProcessRequest() {
  // @@protoc_insertion_point(destructor:processVibrationServiceAPI.v1.ProcessRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ProcessRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ProcessRequest::ArenaDtor(void* object) {
  ProcessRequest* _this = reinterpret_cast< ProcessRequest* >(object);
  (void)_this;
}
void ProcessRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ProcessRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ProcessRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:processVibrationServiceAPI.v1.ProcessRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  unix_time_.Clear();
  vibration_x_.Clear();
  vibration_y_.Clear();
  vibration_z_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProcessRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated double unix_time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_unix_time(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9) {
          _internal_add_unix_time(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // repeated float vibration_x = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_vibration_x(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21) {
          _internal_add_vibration_x(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated float vibration_y = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_vibration_y(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29) {
          _internal_add_vibration_y(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated float vibration_z = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_vibration_z(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37) {
          _internal_add_vibration_z(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ProcessRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:processVibrationServiceAPI.v1.ProcessRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated double unix_time = 1;
  if (this->_internal_unix_time_size() > 0) {
    target = stream->WriteFixedPacked(1, _internal_unix_time(), target);
  }

  // repeated float vibration_x = 2;
  if (this->_internal_vibration_x_size() > 0) {
    target = stream->WriteFixedPacked(2, _internal_vibration_x(), target);
  }

  // repeated float vibration_y = 3;
  if (this->_internal_vibration_y_size() > 0) {
    target = stream->WriteFixedPacked(3, _internal_vibration_y(), target);
  }

  // repeated float vibration_z = 4;
  if (this->_internal_vibration_z_size() > 0) {
    target = stream->WriteFixedPacked(4, _internal_vibration_z(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:processVibrationServiceAPI.v1.ProcessRequest)
  return target;
}

size_t ProcessRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:processVibrationServiceAPI.v1.ProcessRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated double unix_time = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_unix_time_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _unix_time_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated float vibration_x = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_vibration_x_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _vibration_x_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated float vibration_y = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_vibration_y_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _vibration_y_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated float vibration_z = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_vibration_z_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _vibration_z_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProcessRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:processVibrationServiceAPI.v1.ProcessRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ProcessRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ProcessRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:processVibrationServiceAPI.v1.ProcessRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:processVibrationServiceAPI.v1.ProcessRequest)
    MergeFrom(*source);
  }
}

void ProcessRequest::MergeFrom(const ProcessRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:processVibrationServiceAPI.v1.ProcessRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  unix_time_.MergeFrom(from.unix_time_);
  vibration_x_.MergeFrom(from.vibration_x_);
  vibration_y_.MergeFrom(from.vibration_y_);
  vibration_z_.MergeFrom(from.vibration_z_);
}

void ProcessRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:processVibrationServiceAPI.v1.ProcessRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProcessRequest::CopyFrom(const ProcessRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:processVibrationServiceAPI.v1.ProcessRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProcessRequest::IsInitialized() const {
  return true;
}

void ProcessRequest::InternalSwap(ProcessRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  unix_time_.InternalSwap(&other->unix_time_);
  vibration_x_.InternalSwap(&other->vibration_x_);
  vibration_y_.InternalSwap(&other->vibration_y_);
  vibration_z_.InternalSwap(&other->vibration_z_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ProcessRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ProcessResponse::_Internal {
 public:
};

ProcessResponse::ProcessResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  unix_time_(arena),
  rms_vibration_x_(arena),
  rms_vibration_y_(arena),
  rms_vibration_z_(arena),
  vdv_vibration_x_(arena),
  vdv_vibration_y_(arena),
  vdv_vibration_z_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:processVibrationServiceAPI.v1.ProcessResponse)
}
ProcessResponse::ProcessResponse(const ProcessResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      unix_time_(from.unix_time_),
      rms_vibration_x_(from.rms_vibration_x_),
      rms_vibration_y_(from.rms_vibration_y_),
      rms_vibration_z_(from.rms_vibration_z_),
      vdv_vibration_x_(from.vdv_vibration_x_),
      vdv_vibration_y_(from.vdv_vibration_y_),
      vdv_vibration_z_(from.vdv_vibration_z_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:processVibrationServiceAPI.v1.ProcessResponse)
}

void ProcessResponse::SharedCtor() {
}

ProcessResponse::~ProcessResponse() {
  // @@protoc_insertion_point(destructor:processVibrationServiceAPI.v1.ProcessResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ProcessResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ProcessResponse::ArenaDtor(void* object) {
  ProcessResponse* _this = reinterpret_cast< ProcessResponse* >(object);
  (void)_this;
}
void ProcessResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ProcessResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ProcessResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:processVibrationServiceAPI.v1.ProcessResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  unix_time_.Clear();
  rms_vibration_x_.Clear();
  rms_vibration_y_.Clear();
  rms_vibration_z_.Clear();
  vdv_vibration_x_.Clear();
  vdv_vibration_y_.Clear();
  vdv_vibration_z_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProcessResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated double unix_time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_unix_time(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9) {
          _internal_add_unix_time(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // repeated float rms_vibration_x = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_rms_vibration_x(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21) {
          _internal_add_rms_vibration_x(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated float rms_vibration_y = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_rms_vibration_y(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29) {
          _internal_add_rms_vibration_y(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated float rms_vibration_z = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_rms_vibration_z(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37) {
          _internal_add_rms_vibration_z(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated float VDV_vibration_x = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_vdv_vibration_x(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45) {
          _internal_add_vdv_vibration_x(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated float VDV_vibration_y = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_vdv_vibration_y(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53) {
          _internal_add_vdv_vibration_y(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated float VDV_vibration_z = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_vdv_vibration_z(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61) {
          _internal_add_vdv_vibration_z(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ProcessResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:processVibrationServiceAPI.v1.ProcessResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated double unix_time = 1;
  if (this->_internal_unix_time_size() > 0) {
    target = stream->WriteFixedPacked(1, _internal_unix_time(), target);
  }

  // repeated float rms_vibration_x = 2;
  if (this->_internal_rms_vibration_x_size() > 0) {
    target = stream->WriteFixedPacked(2, _internal_rms_vibration_x(), target);
  }

  // repeated float rms_vibration_y = 3;
  if (this->_internal_rms_vibration_y_size() > 0) {
    target = stream->WriteFixedPacked(3, _internal_rms_vibration_y(), target);
  }

  // repeated float rms_vibration_z = 4;
  if (this->_internal_rms_vibration_z_size() > 0) {
    target = stream->WriteFixedPacked(4, _internal_rms_vibration_z(), target);
  }

  // repeated float VDV_vibration_x = 5;
  if (this->_internal_vdv_vibration_x_size() > 0) {
    target = stream->WriteFixedPacked(5, _internal_vdv_vibration_x(), target);
  }

  // repeated float VDV_vibration_y = 6;
  if (this->_internal_vdv_vibration_y_size() > 0) {
    target = stream->WriteFixedPacked(6, _internal_vdv_vibration_y(), target);
  }

  // repeated float VDV_vibration_z = 7;
  if (this->_internal_vdv_vibration_z_size() > 0) {
    target = stream->WriteFixedPacked(7, _internal_vdv_vibration_z(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:processVibrationServiceAPI.v1.ProcessResponse)
  return target;
}

size_t ProcessResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:processVibrationServiceAPI.v1.ProcessResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated double unix_time = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_unix_time_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _unix_time_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated float rms_vibration_x = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_rms_vibration_x_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _rms_vibration_x_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated float rms_vibration_y = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_rms_vibration_y_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _rms_vibration_y_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated float rms_vibration_z = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_rms_vibration_z_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _rms_vibration_z_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated float VDV_vibration_x = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_vdv_vibration_x_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _vdv_vibration_x_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated float VDV_vibration_y = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_vdv_vibration_y_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _vdv_vibration_y_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated float VDV_vibration_z = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_vdv_vibration_z_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _vdv_vibration_z_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProcessResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:processVibrationServiceAPI.v1.ProcessResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ProcessResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ProcessResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:processVibrationServiceAPI.v1.ProcessResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:processVibrationServiceAPI.v1.ProcessResponse)
    MergeFrom(*source);
  }
}

void ProcessResponse::MergeFrom(const ProcessResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:processVibrationServiceAPI.v1.ProcessResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  unix_time_.MergeFrom(from.unix_time_);
  rms_vibration_x_.MergeFrom(from.rms_vibration_x_);
  rms_vibration_y_.MergeFrom(from.rms_vibration_y_);
  rms_vibration_z_.MergeFrom(from.rms_vibration_z_);
  vdv_vibration_x_.MergeFrom(from.vdv_vibration_x_);
  vdv_vibration_y_.MergeFrom(from.vdv_vibration_y_);
  vdv_vibration_z_.MergeFrom(from.vdv_vibration_z_);
}

void ProcessResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:processVibrationServiceAPI.v1.ProcessResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProcessResponse::CopyFrom(const ProcessResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:processVibrationServiceAPI.v1.ProcessResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProcessResponse::IsInitialized() const {
  return true;
}

void ProcessResponse::InternalSwap(ProcessResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  unix_time_.InternalSwap(&other->unix_time_);
  rms_vibration_x_.InternalSwap(&other->rms_vibration_x_);
  rms_vibration_y_.InternalSwap(&other->rms_vibration_y_);
  rms_vibration_z_.InternalSwap(&other->rms_vibration_z_);
  vdv_vibration_x_.InternalSwap(&other->vdv_vibration_x_);
  vdv_vibration_y_.InternalSwap(&other->vdv_vibration_y_);
  vdv_vibration_z_.InternalSwap(&other->vdv_vibration_z_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ProcessResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace processVibrationServiceAPI
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::processVibrationServiceAPI::v1::ProcessRequest* Arena::CreateMaybeMessage< ::processVibrationServiceAPI::v1::ProcessRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::processVibrationServiceAPI::v1::ProcessRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::processVibrationServiceAPI::v1::ProcessResponse* Arena::CreateMaybeMessage< ::processVibrationServiceAPI::v1::ProcessResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::processVibrationServiceAPI::v1::ProcessResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
