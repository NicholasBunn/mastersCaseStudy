// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: process_vibration_service_api_v1.proto

#include "process_vibration_service_api_v1.pb.h"
#include "process_vibration_service_api_v1.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace processVibrationServiceAPI {
namespace v1 {

static const char* ProcessVibrationService_method_names[] = {
  "/processVibrationServiceAPI.v1.ProcessVibrationService/ProcessEstimates",
  "/processVibrationServiceAPI.v1.ProcessVibrationService/ProcessTracking",
};

std::unique_ptr< ProcessVibrationService::Stub> ProcessVibrationService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< ProcessVibrationService::Stub> stub(new ProcessVibrationService::Stub(channel, options));
  return stub;
}

ProcessVibrationService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_ProcessEstimates_(ProcessVibrationService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ProcessTracking_(ProcessVibrationService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status ProcessVibrationService::Stub::ProcessEstimates(::grpc::ClientContext* context, const ::processVibrationServiceAPI::v1::ProcessRequest& request, ::processVibrationServiceAPI::v1::ProcessResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::processVibrationServiceAPI::v1::ProcessRequest, ::processVibrationServiceAPI::v1::ProcessResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ProcessEstimates_, context, request, response);
}

void ProcessVibrationService::Stub::experimental_async::ProcessEstimates(::grpc::ClientContext* context, const ::processVibrationServiceAPI::v1::ProcessRequest* request, ::processVibrationServiceAPI::v1::ProcessResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::processVibrationServiceAPI::v1::ProcessRequest, ::processVibrationServiceAPI::v1::ProcessResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ProcessEstimates_, context, request, response, std::move(f));
}

void ProcessVibrationService::Stub::experimental_async::ProcessEstimates(::grpc::ClientContext* context, const ::processVibrationServiceAPI::v1::ProcessRequest* request, ::processVibrationServiceAPI::v1::ProcessResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ProcessEstimates_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::processVibrationServiceAPI::v1::ProcessResponse>* ProcessVibrationService::Stub::PrepareAsyncProcessEstimatesRaw(::grpc::ClientContext* context, const ::processVibrationServiceAPI::v1::ProcessRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::processVibrationServiceAPI::v1::ProcessResponse, ::processVibrationServiceAPI::v1::ProcessRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ProcessEstimates_, context, request);
}

::grpc::ClientAsyncResponseReader< ::processVibrationServiceAPI::v1::ProcessResponse>* ProcessVibrationService::Stub::AsyncProcessEstimatesRaw(::grpc::ClientContext* context, const ::processVibrationServiceAPI::v1::ProcessRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncProcessEstimatesRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ProcessVibrationService::Stub::ProcessTracking(::grpc::ClientContext* context, const ::processVibrationServiceAPI::v1::ProcessRequest& request, ::processVibrationServiceAPI::v1::ProcessResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::processVibrationServiceAPI::v1::ProcessRequest, ::processVibrationServiceAPI::v1::ProcessResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ProcessTracking_, context, request, response);
}

void ProcessVibrationService::Stub::experimental_async::ProcessTracking(::grpc::ClientContext* context, const ::processVibrationServiceAPI::v1::ProcessRequest* request, ::processVibrationServiceAPI::v1::ProcessResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::processVibrationServiceAPI::v1::ProcessRequest, ::processVibrationServiceAPI::v1::ProcessResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ProcessTracking_, context, request, response, std::move(f));
}

void ProcessVibrationService::Stub::experimental_async::ProcessTracking(::grpc::ClientContext* context, const ::processVibrationServiceAPI::v1::ProcessRequest* request, ::processVibrationServiceAPI::v1::ProcessResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ProcessTracking_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::processVibrationServiceAPI::v1::ProcessResponse>* ProcessVibrationService::Stub::PrepareAsyncProcessTrackingRaw(::grpc::ClientContext* context, const ::processVibrationServiceAPI::v1::ProcessRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::processVibrationServiceAPI::v1::ProcessResponse, ::processVibrationServiceAPI::v1::ProcessRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ProcessTracking_, context, request);
}

::grpc::ClientAsyncResponseReader< ::processVibrationServiceAPI::v1::ProcessResponse>* ProcessVibrationService::Stub::AsyncProcessTrackingRaw(::grpc::ClientContext* context, const ::processVibrationServiceAPI::v1::ProcessRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncProcessTrackingRaw(context, request, cq);
  result->StartCall();
  return result;
}

ProcessVibrationService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ProcessVibrationService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ProcessVibrationService::Service, ::processVibrationServiceAPI::v1::ProcessRequest, ::processVibrationServiceAPI::v1::ProcessResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ProcessVibrationService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::processVibrationServiceAPI::v1::ProcessRequest* req,
             ::processVibrationServiceAPI::v1::ProcessResponse* resp) {
               return service->ProcessEstimates(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ProcessVibrationService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ProcessVibrationService::Service, ::processVibrationServiceAPI::v1::ProcessRequest, ::processVibrationServiceAPI::v1::ProcessResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ProcessVibrationService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::processVibrationServiceAPI::v1::ProcessRequest* req,
             ::processVibrationServiceAPI::v1::ProcessResponse* resp) {
               return service->ProcessTracking(ctx, req, resp);
             }, this)));
}

ProcessVibrationService::Service::~Service() {
}

::grpc::Status ProcessVibrationService::Service::ProcessEstimates(::grpc::ServerContext* context, const ::processVibrationServiceAPI::v1::ProcessRequest* request, ::processVibrationServiceAPI::v1::ProcessResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ProcessVibrationService::Service::ProcessTracking(::grpc::ServerContext* context, const ::processVibrationServiceAPI::v1::ProcessRequest* request, ::processVibrationServiceAPI::v1::ProcessResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace processVibrationServiceAPI
}  // namespace v1

