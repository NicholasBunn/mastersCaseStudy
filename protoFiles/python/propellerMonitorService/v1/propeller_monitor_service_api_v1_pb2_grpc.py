# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from . import propeller_monitor_service_api_v1_pb2 as propeller__monitor__service__api__v1__pb2


class MonitorPropellerServiceStub(object):
    """
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.EstimatePropellerLoad = channel.unary_stream(
                '/propellerMonitorService.v1.MonitorPropellerService/EstimatePropellerLoad',
                request_serializer=propeller__monitor__service__api__v1__pb2.PropellerLoadRequest.SerializeToString,
                response_deserializer=propeller__monitor__service__api__v1__pb2.PropellerLoadResponse.FromString,
                )


class MonitorPropellerServiceServicer(object):
    """
    """

    def EstimatePropellerLoad(self, request, context):
        """Accepts a stream of Message sent while a route is being traversed,
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MonitorPropellerServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'EstimatePropellerLoad': grpc.unary_stream_rpc_method_handler(
                    servicer.EstimatePropellerLoad,
                    request_deserializer=propeller__monitor__service__api__v1__pb2.PropellerLoadRequest.FromString,
                    response_serializer=propeller__monitor__service__api__v1__pb2.PropellerLoadResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'propellerMonitorService.v1.MonitorPropellerService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class MonitorPropellerService(object):
    """
    """

    @staticmethod
    def EstimatePropellerLoad(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/propellerMonitorService.v1.MonitorPropellerService/EstimatePropellerLoad',
            propeller__monitor__service__api__v1__pb2.PropellerLoadRequest.SerializeToString,
            propeller__monitor__service__api__v1__pb2.PropellerLoadResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
