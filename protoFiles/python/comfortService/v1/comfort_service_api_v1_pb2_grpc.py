# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from . import comfort_service_api_v1_pb2 as comfort__service__api__v1__pb2


class ComfortServiceStub(object):
    """'Comfort Service' offers one service call that provides information about human comfort onboard, in response to vessel vibrations.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ComfortRating = channel.unary_unary(
                '/comfortServiceAPI.v1.ComfortService/ComfortRating',
                request_serializer=comfort__service__api__v1__pb2.ComfortRequest.SerializeToString,
                response_deserializer=comfort__service__api__v1__pb2.ComfortResponse.FromString,
                )


class ComfortServiceServicer(object):
    """'Comfort Service' offers one service call that provides information about human comfort onboard, in response to vessel vibrations.
    """

    def ComfortRating(self, request, context):
        """The 'Comfort Rating' call provides foresight for tactical decision-making by providing a comfort rating for a proposed route, based on estimated vibrations on board.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ComfortServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ComfortRating': grpc.unary_unary_rpc_method_handler(
                    servicer.ComfortRating,
                    request_deserializer=comfort__service__api__v1__pb2.ComfortRequest.FromString,
                    response_serializer=comfort__service__api__v1__pb2.ComfortResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'comfortServiceAPI.v1.ComfortService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class ComfortService(object):
    """'Comfort Service' offers one service call that provides information about human comfort onboard, in response to vessel vibrations.
    """

    @staticmethod
    def ComfortRating(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/comfortServiceAPI.v1.ComfortService/ComfortRating',
            comfort__service__api__v1__pb2.ComfortRequest.SerializeToString,
            comfort__service__api__v1__pb2.ComfortResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
