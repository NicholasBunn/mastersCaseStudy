// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package powerTrainService

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PowerTrainServiceClient is the client API for PowerTrainService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PowerTrainServiceClient interface {
	// The 'Power Estimate' call provides foresight for tactical decision-making by providing power estimates for a requested route and sailing conditions
	PowerEstimate(ctx context.Context, in *PowerTrainEstimateRequest, opts ...grpc.CallOption) (*PowerEstimateResponse, error)
	// The 'Cost Estimate' call provides foresight for tactical decision-making by providing cost estimates for a requested route and sailing conditions
	CostEstimate(ctx context.Context, in *PowerTrainEstimateRequest, opts ...grpc.CallOption) (*CostEstimateResponse, error)
	// The 'Power Tracking' call provides insight for tactical and operational decision-making by providing real-time power use by the vessel
	PowerTracking(ctx context.Context, in *PowerTrackingRequest, opts ...grpc.CallOption) (*PowerTrackingResponse, error)
	// The 'Power Estimate Evaluation' call provdes hindsight for strategic decision-making by evaluating the accuracy of the models predictions
	PowerEstimateEvaluation(ctx context.Context, in *PowerTrainEstimateRequest, opts ...grpc.CallOption) (*PowerEvaluationResponse, error)
}

type powerTrainServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPowerTrainServiceClient(cc grpc.ClientConnInterface) PowerTrainServiceClient {
	return &powerTrainServiceClient{cc}
}

func (c *powerTrainServiceClient) PowerEstimate(ctx context.Context, in *PowerTrainEstimateRequest, opts ...grpc.CallOption) (*PowerEstimateResponse, error) {
	out := new(PowerEstimateResponse)
	err := c.cc.Invoke(ctx, "/powerTrainServiceAPI.v1.PowerTrainService/PowerEstimate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *powerTrainServiceClient) CostEstimate(ctx context.Context, in *PowerTrainEstimateRequest, opts ...grpc.CallOption) (*CostEstimateResponse, error) {
	out := new(CostEstimateResponse)
	err := c.cc.Invoke(ctx, "/powerTrainServiceAPI.v1.PowerTrainService/CostEstimate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *powerTrainServiceClient) PowerTracking(ctx context.Context, in *PowerTrackingRequest, opts ...grpc.CallOption) (*PowerTrackingResponse, error) {
	out := new(PowerTrackingResponse)
	err := c.cc.Invoke(ctx, "/powerTrainServiceAPI.v1.PowerTrainService/PowerTracking", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *powerTrainServiceClient) PowerEstimateEvaluation(ctx context.Context, in *PowerTrainEstimateRequest, opts ...grpc.CallOption) (*PowerEvaluationResponse, error) {
	out := new(PowerEvaluationResponse)
	err := c.cc.Invoke(ctx, "/powerTrainServiceAPI.v1.PowerTrainService/PowerEstimateEvaluation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PowerTrainServiceServer is the server API for PowerTrainService service.
// All implementations must embed UnimplementedPowerTrainServiceServer
// for forward compatibility
type PowerTrainServiceServer interface {
	// The 'Power Estimate' call provides foresight for tactical decision-making by providing power estimates for a requested route and sailing conditions
	PowerEstimate(context.Context, *PowerTrainEstimateRequest) (*PowerEstimateResponse, error)
	// The 'Cost Estimate' call provides foresight for tactical decision-making by providing cost estimates for a requested route and sailing conditions
	CostEstimate(context.Context, *PowerTrainEstimateRequest) (*CostEstimateResponse, error)
	// The 'Power Tracking' call provides insight for tactical and operational decision-making by providing real-time power use by the vessel
	PowerTracking(context.Context, *PowerTrackingRequest) (*PowerTrackingResponse, error)
	// The 'Power Estimate Evaluation' call provdes hindsight for strategic decision-making by evaluating the accuracy of the models predictions
	PowerEstimateEvaluation(context.Context, *PowerTrainEstimateRequest) (*PowerEvaluationResponse, error)
	mustEmbedUnimplementedPowerTrainServiceServer()
}

// UnimplementedPowerTrainServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPowerTrainServiceServer struct {
}

func (UnimplementedPowerTrainServiceServer) PowerEstimate(context.Context, *PowerTrainEstimateRequest) (*PowerEstimateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PowerEstimate not implemented")
}
func (UnimplementedPowerTrainServiceServer) CostEstimate(context.Context, *PowerTrainEstimateRequest) (*CostEstimateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CostEstimate not implemented")
}
func (UnimplementedPowerTrainServiceServer) PowerTracking(context.Context, *PowerTrackingRequest) (*PowerTrackingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PowerTracking not implemented")
}
func (UnimplementedPowerTrainServiceServer) PowerEstimateEvaluation(context.Context, *PowerTrainEstimateRequest) (*PowerEvaluationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PowerEstimateEvaluation not implemented")
}
func (UnimplementedPowerTrainServiceServer) mustEmbedUnimplementedPowerTrainServiceServer() {}

// UnsafePowerTrainServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PowerTrainServiceServer will
// result in compilation errors.
type UnsafePowerTrainServiceServer interface {
	mustEmbedUnimplementedPowerTrainServiceServer()
}

func RegisterPowerTrainServiceServer(s grpc.ServiceRegistrar, srv PowerTrainServiceServer) {
	s.RegisterService(&PowerTrainService_ServiceDesc, srv)
}

func _PowerTrainService_PowerEstimate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PowerTrainEstimateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PowerTrainServiceServer).PowerEstimate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/powerTrainServiceAPI.v1.PowerTrainService/PowerEstimate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PowerTrainServiceServer).PowerEstimate(ctx, req.(*PowerTrainEstimateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PowerTrainService_CostEstimate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PowerTrainEstimateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PowerTrainServiceServer).CostEstimate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/powerTrainServiceAPI.v1.PowerTrainService/CostEstimate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PowerTrainServiceServer).CostEstimate(ctx, req.(*PowerTrainEstimateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PowerTrainService_PowerTracking_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PowerTrackingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PowerTrainServiceServer).PowerTracking(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/powerTrainServiceAPI.v1.PowerTrainService/PowerTracking",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PowerTrainServiceServer).PowerTracking(ctx, req.(*PowerTrackingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PowerTrainService_PowerEstimateEvaluation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PowerTrainEstimateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PowerTrainServiceServer).PowerEstimateEvaluation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/powerTrainServiceAPI.v1.PowerTrainService/PowerEstimateEvaluation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PowerTrainServiceServer).PowerEstimateEvaluation(ctx, req.(*PowerTrainEstimateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PowerTrainService_ServiceDesc is the grpc.ServiceDesc for PowerTrainService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PowerTrainService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "powerTrainServiceAPI.v1.PowerTrainService",
	HandlerType: (*PowerTrainServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PowerEstimate",
			Handler:    _PowerTrainService_PowerEstimate_Handler,
		},
		{
			MethodName: "CostEstimate",
			Handler:    _PowerTrainService_CostEstimate_Handler,
		},
		{
			MethodName: "PowerTracking",
			Handler:    _PowerTrainService_PowerTracking_Handler,
		},
		{
			MethodName: "PowerEstimateEvaluation",
			Handler:    _PowerTrainService_PowerEstimateEvaluation_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "powerTrainService/proto/v1/power_train_service_api_v1.proto",
}
