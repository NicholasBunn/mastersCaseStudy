// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package vesselMotionAggregator

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// VMEstimateServiceClient is the client API for VMEstimateService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VMEstimateServiceClient interface {
	// The 'Estimate Vessel Motion' call provides foresight for tactical decision-making by providing detailed information into the motion of the S.A. Agulhas for a porential route.
	EstimateVesselMotion(ctx context.Context, in *VMEstimateRequest, opts ...grpc.CallOption) (*VMEstimateResponse, error)
}

type vMEstimateServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewVMEstimateServiceClient(cc grpc.ClientConnInterface) VMEstimateServiceClient {
	return &vMEstimateServiceClient{cc}
}

func (c *vMEstimateServiceClient) EstimateVesselMotion(ctx context.Context, in *VMEstimateRequest, opts ...grpc.CallOption) (*VMEstimateResponse, error) {
	out := new(VMEstimateResponse)
	err := c.cc.Invoke(ctx, "/vesselMotionAggregator.v1.VMEstimateService/EstimateVesselMotion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VMEstimateServiceServer is the server API for VMEstimateService service.
// All implementations must embed UnimplementedVMEstimateServiceServer
// for forward compatibility
type VMEstimateServiceServer interface {
	// The 'Estimate Vessel Motion' call provides foresight for tactical decision-making by providing detailed information into the motion of the S.A. Agulhas for a porential route.
	EstimateVesselMotion(context.Context, *VMEstimateRequest) (*VMEstimateResponse, error)
	mustEmbedUnimplementedVMEstimateServiceServer()
}

// UnimplementedVMEstimateServiceServer must be embedded to have forward compatible implementations.
type UnimplementedVMEstimateServiceServer struct {
}

func (UnimplementedVMEstimateServiceServer) EstimateVesselMotion(context.Context, *VMEstimateRequest) (*VMEstimateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EstimateVesselMotion not implemented")
}
func (UnimplementedVMEstimateServiceServer) mustEmbedUnimplementedVMEstimateServiceServer() {}

// UnsafeVMEstimateServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VMEstimateServiceServer will
// result in compilation errors.
type UnsafeVMEstimateServiceServer interface {
	mustEmbedUnimplementedVMEstimateServiceServer()
}

func RegisterVMEstimateServiceServer(s grpc.ServiceRegistrar, srv VMEstimateServiceServer) {
	s.RegisterService(&VMEstimateService_ServiceDesc, srv)
}

func _VMEstimateService_EstimateVesselMotion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VMEstimateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VMEstimateServiceServer).EstimateVesselMotion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vesselMotionAggregator.v1.VMEstimateService/EstimateVesselMotion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VMEstimateServiceServer).EstimateVesselMotion(ctx, req.(*VMEstimateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// VMEstimateService_ServiceDesc is the grpc.ServiceDesc for VMEstimateService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var VMEstimateService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "vesselMotionAggregator.v1.VMEstimateService",
	HandlerType: (*VMEstimateServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "EstimateVesselMotion",
			Handler:    _VMEstimateService_EstimateVesselMotion_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "vesselMotionAggregator/proto/v1/vessel_motion_aggregator_api_v1.proto",
}
