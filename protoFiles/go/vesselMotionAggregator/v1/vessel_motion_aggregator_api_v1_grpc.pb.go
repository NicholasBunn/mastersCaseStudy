// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package vesselMotionAggregator

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// EsimateServiceClient is the client API for EsimateService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EsimateServiceClient interface {
	EstimatePowerTrain(ctx context.Context, in *PTEstimateRequest, opts ...grpc.CallOption) (*PTEstimateResponse, error)
}

type esimateServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEsimateServiceClient(cc grpc.ClientConnInterface) EsimateServiceClient {
	return &esimateServiceClient{cc}
}

func (c *esimateServiceClient) EstimatePowerTrain(ctx context.Context, in *PTEstimateRequest, opts ...grpc.CallOption) (*PTEstimateResponse, error) {
	out := new(PTEstimateResponse)
	err := c.cc.Invoke(ctx, "/vesselMotionAggregator.v1.EsimateService/EstimatePowerTrain", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EsimateServiceServer is the server API for EsimateService service.
// All implementations must embed UnimplementedEsimateServiceServer
// for forward compatibility
type EsimateServiceServer interface {
	EstimatePowerTrain(context.Context, *PTEstimateRequest) (*PTEstimateResponse, error)
	mustEmbedUnimplementedEsimateServiceServer()
}

// UnimplementedEsimateServiceServer must be embedded to have forward compatible implementations.
type UnimplementedEsimateServiceServer struct {
}

func (UnimplementedEsimateServiceServer) EstimatePowerTrain(context.Context, *PTEstimateRequest) (*PTEstimateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EstimatePowerTrain not implemented")
}
func (UnimplementedEsimateServiceServer) mustEmbedUnimplementedEsimateServiceServer() {}

// UnsafeEsimateServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EsimateServiceServer will
// result in compilation errors.
type UnsafeEsimateServiceServer interface {
	mustEmbedUnimplementedEsimateServiceServer()
}

func RegisterEsimateServiceServer(s grpc.ServiceRegistrar, srv EsimateServiceServer) {
	s.RegisterService(&EsimateService_ServiceDesc, srv)
}

func _EsimateService_EstimatePowerTrain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PTEstimateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EsimateServiceServer).EstimatePowerTrain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vesselMotionAggregator.v1.EsimateService/EstimatePowerTrain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EsimateServiceServer).EstimatePowerTrain(ctx, req.(*PTEstimateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// EsimateService_ServiceDesc is the grpc.ServiceDesc for EsimateService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EsimateService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "vesselMotionAggregator.v1.EsimateService",
	HandlerType: (*EsimateServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "EstimatePowerTrain",
			Handler:    _EsimateService_EstimatePowerTrain_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "vesselMotionAggregator/proto/v1/vessel_motion_aggregator_api_v1.proto",
}
