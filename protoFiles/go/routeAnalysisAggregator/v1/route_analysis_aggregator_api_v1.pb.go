// Code generated by protoc-gen-go. DO NOT EDIT.
// source: routeAnalysisAggregator/proto/v1/route_analysis_aggregator_api_v1.proto

package routeAnalysisAggregator

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type HabitibilityRating int32

const (
	HabitibilityRating_UNKNOWN_RATING          HabitibilityRating = 0
	HabitibilityRating_NOT_UNCOMFORTABLE       HabitibilityRating = 1
	HabitibilityRating_SLIGHTLY_UNCOMFORTABLE  HabitibilityRating = 2
	HabitibilityRating_FAIRLY_UNCOMFORTABLE    HabitibilityRating = 3
	HabitibilityRating_UNCOMFORTABLE           HabitibilityRating = 4
	HabitibilityRating_VERY_UNCOMFORTABLE      HabitibilityRating = 5
	HabitibilityRating_EXTREMELY_UNCOMFORTABLE HabitibilityRating = 6
)

var HabitibilityRating_name = map[int32]string{
	0: "UNKNOWN_RATING",
	1: "NOT_UNCOMFORTABLE",
	2: "SLIGHTLY_UNCOMFORTABLE",
	3: "FAIRLY_UNCOMFORTABLE",
	4: "UNCOMFORTABLE",
	5: "VERY_UNCOMFORTABLE",
	6: "EXTREMELY_UNCOMFORTABLE",
}

var HabitibilityRating_value = map[string]int32{
	"UNKNOWN_RATING":          0,
	"NOT_UNCOMFORTABLE":       1,
	"SLIGHTLY_UNCOMFORTABLE":  2,
	"FAIRLY_UNCOMFORTABLE":    3,
	"UNCOMFORTABLE":           4,
	"VERY_UNCOMFORTABLE":      5,
	"EXTREMELY_UNCOMFORTABLE": 6,
}

func (x HabitibilityRating) String() string {
	return proto.EnumName(HabitibilityRating_name, int32(x))
}

func (HabitibilityRating) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_f2785769c62a07ab, []int{0}
}

type AnalysisRequest struct {
	UnixTime             []float64 `protobuf:"fixed64,1,rep,packed,name=unix_time,json=unixTime,proto3" json:"unix_time,omitempty"`
	Latitude             []float32 `protobuf:"fixed32,2,rep,packed,name=latitude,proto3" json:"latitude,omitempty"`
	Longitude            []float32 `protobuf:"fixed32,3,rep,packed,name=longitude,proto3" json:"longitude,omitempty"`
	Heading              []float32 `protobuf:"fixed32,4,rep,packed,name=heading,proto3" json:"heading,omitempty"`
	PropPitch            []float32 `protobuf:"fixed32,5,rep,packed,name=prop_pitch,json=propPitch,proto3" json:"prop_pitch,omitempty"`
	MotorSpeed           []float32 `protobuf:"fixed32,6,rep,packed,name=motor_speed,json=motorSpeed,proto3" json:"motor_speed,omitempty"`
	SOG                  []float32 `protobuf:"fixed32,7,rep,packed,name=SOG,proto3" json:"SOG,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *AnalysisRequest) Reset()         { *m = AnalysisRequest{} }
func (m *AnalysisRequest) String() string { return proto.CompactTextString(m) }
func (*AnalysisRequest) ProtoMessage()    {}
func (*AnalysisRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f2785769c62a07ab, []int{0}
}

func (m *AnalysisRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AnalysisRequest.Unmarshal(m, b)
}
func (m *AnalysisRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AnalysisRequest.Marshal(b, m, deterministic)
}
func (m *AnalysisRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AnalysisRequest.Merge(m, src)
}
func (m *AnalysisRequest) XXX_Size() int {
	return xxx_messageInfo_AnalysisRequest.Size(m)
}
func (m *AnalysisRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AnalysisRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AnalysisRequest proto.InternalMessageInfo

func (m *AnalysisRequest) GetUnixTime() []float64 {
	if m != nil {
		return m.UnixTime
	}
	return nil
}

func (m *AnalysisRequest) GetLatitude() []float32 {
	if m != nil {
		return m.Latitude
	}
	return nil
}

func (m *AnalysisRequest) GetLongitude() []float32 {
	if m != nil {
		return m.Longitude
	}
	return nil
}

func (m *AnalysisRequest) GetHeading() []float32 {
	if m != nil {
		return m.Heading
	}
	return nil
}

func (m *AnalysisRequest) GetPropPitch() []float32 {
	if m != nil {
		return m.PropPitch
	}
	return nil
}

func (m *AnalysisRequest) GetMotorSpeed() []float32 {
	if m != nil {
		return m.MotorSpeed
	}
	return nil
}

func (m *AnalysisRequest) GetSOG() []float32 {
	if m != nil {
		return m.SOG
	}
	return nil
}

type AnalysisResponse struct {
	UnixTime             []float64          `protobuf:"fixed64,1,rep,packed,name=unix_time,json=unixTime,proto3" json:"unix_time,omitempty"`
	AveragePower         float32            `protobuf:"fixed32,2,opt,name=average_power,json=averagePower,proto3" json:"average_power,omitempty"`
	TotalCost            float32            `protobuf:"fixed32,3,opt,name=total_cost,json=totalCost,proto3" json:"total_cost,omitempty"`
	AverageRmsX          float64            `protobuf:"fixed64,4,opt,name=average_rms_x,json=averageRmsX,proto3" json:"average_rms_x,omitempty"`
	AverageRmsY          float64            `protobuf:"fixed64,5,opt,name=average_rms_y,json=averageRmsY,proto3" json:"average_rms_y,omitempty"`
	AverageRmsZ          float64            `protobuf:"fixed64,6,opt,name=average_rms_z,json=averageRmsZ,proto3" json:"average_rms_z,omitempty"`
	ComfortLevel         HabitibilityRating `protobuf:"varint,7,opt,name=comfort_level,json=comfortLevel,proto3,enum=routeAnalysisAggregatorAPI.v1.HabitibilityRating" json:"comfort_level,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *AnalysisResponse) Reset()         { *m = AnalysisResponse{} }
func (m *AnalysisResponse) String() string { return proto.CompactTextString(m) }
func (*AnalysisResponse) ProtoMessage()    {}
func (*AnalysisResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f2785769c62a07ab, []int{1}
}

func (m *AnalysisResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AnalysisResponse.Unmarshal(m, b)
}
func (m *AnalysisResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AnalysisResponse.Marshal(b, m, deterministic)
}
func (m *AnalysisResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AnalysisResponse.Merge(m, src)
}
func (m *AnalysisResponse) XXX_Size() int {
	return xxx_messageInfo_AnalysisResponse.Size(m)
}
func (m *AnalysisResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AnalysisResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AnalysisResponse proto.InternalMessageInfo

func (m *AnalysisResponse) GetUnixTime() []float64 {
	if m != nil {
		return m.UnixTime
	}
	return nil
}

func (m *AnalysisResponse) GetAveragePower() float32 {
	if m != nil {
		return m.AveragePower
	}
	return 0
}

func (m *AnalysisResponse) GetTotalCost() float32 {
	if m != nil {
		return m.TotalCost
	}
	return 0
}

func (m *AnalysisResponse) GetAverageRmsX() float64 {
	if m != nil {
		return m.AverageRmsX
	}
	return 0
}

func (m *AnalysisResponse) GetAverageRmsY() float64 {
	if m != nil {
		return m.AverageRmsY
	}
	return 0
}

func (m *AnalysisResponse) GetAverageRmsZ() float64 {
	if m != nil {
		return m.AverageRmsZ
	}
	return 0
}

func (m *AnalysisResponse) GetComfortLevel() HabitibilityRating {
	if m != nil {
		return m.ComfortLevel
	}
	return HabitibilityRating_UNKNOWN_RATING
}

func init() {
	proto.RegisterEnum("routeAnalysisAggregatorAPI.v1.HabitibilityRating", HabitibilityRating_name, HabitibilityRating_value)
	proto.RegisterType((*AnalysisRequest)(nil), "routeAnalysisAggregatorAPI.v1.AnalysisRequest")
	proto.RegisterType((*AnalysisResponse)(nil), "routeAnalysisAggregatorAPI.v1.AnalysisResponse")
}

func init() {
	proto.RegisterFile("routeAnalysisAggregator/proto/v1/route_analysis_aggregator_api_v1.proto", fileDescriptor_f2785769c62a07ab)
}

var fileDescriptor_f2785769c62a07ab = []byte{
	// 522 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x93, 0x41, 0x6f, 0xda, 0x3c,
	0x18, 0xc7, 0xdf, 0x24, 0x05, 0xca, 0x53, 0xe8, 0x4b, 0xad, 0xad, 0xb3, 0xe8, 0xaa, 0x21, 0x76,
	0x41, 0x3b, 0x80, 0x60, 0xbb, 0xed, 0x94, 0x56, 0x94, 0xa2, 0xd1, 0x80, 0x4c, 0xda, 0xb5, 0xbd,
	0x58, 0x06, 0xbc, 0xd4, 0x52, 0x12, 0x67, 0x89, 0xc9, 0xca, 0x8e, 0xfb, 0x52, 0x3b, 0xed, 0x5b,
	0xec, 0x03, 0x4d, 0x09, 0xb4, 0x6c, 0x41, 0x74, 0xbb, 0xc5, 0xbf, 0xff, 0x2f, 0x7f, 0xc5, 0x8e,
	0x1f, 0xe8, 0x85, 0x72, 0xae, 0xb8, 0xe9, 0x33, 0x77, 0x11, 0x89, 0xc8, 0x74, 0x9c, 0x90, 0x3b,
	0x4c, 0xc9, 0xb0, 0x15, 0x84, 0x52, 0xc9, 0x56, 0xdc, 0x6e, 0xa5, 0x02, 0x65, 0x2b, 0x83, 0xb2,
	0x47, 0x85, 0xb2, 0x40, 0xd0, 0xb8, 0xdd, 0x4c, 0x4d, 0x74, 0xbc, 0xa5, 0xc8, 0x1c, 0xf5, 0x9b,
	0x71, 0xbb, 0xfe, 0x53, 0x83, 0xff, 0x1f, 0x42, 0xc2, 0x3f, 0xcf, 0x79, 0xa4, 0xd0, 0x11, 0x14,
	0xe7, 0xbe, 0xb8, 0xa7, 0x4a, 0x78, 0x1c, 0x6b, 0x35, 0xa3, 0xa1, 0x91, 0xdd, 0x04, 0xd8, 0xc2,
	0xe3, 0xa8, 0x0a, 0xbb, 0x2e, 0x53, 0x42, 0xcd, 0x67, 0x1c, 0xeb, 0x35, 0xa3, 0xa1, 0x93, 0xc7,
	0x35, 0x7a, 0x09, 0x45, 0x57, 0xfa, 0xce, 0x32, 0x34, 0xd2, 0x70, 0x0d, 0x10, 0x86, 0xc2, 0x1d,
	0x67, 0x33, 0xe1, 0x3b, 0x78, 0x27, 0xcd, 0x1e, 0x96, 0xe8, 0x18, 0x20, 0x08, 0x65, 0x40, 0x03,
	0xa1, 0xa6, 0x77, 0x38, 0xb7, 0x7c, 0x31, 0x21, 0xa3, 0x04, 0xa0, 0x57, 0xb0, 0xe7, 0xc9, 0x64,
	0x63, 0x51, 0xc0, 0xf9, 0x0c, 0xe7, 0xd3, 0x1c, 0x52, 0x34, 0x4e, 0x08, 0xaa, 0x80, 0x31, 0x1e,
	0xf6, 0x70, 0x21, 0x0d, 0x92, 0xc7, 0xfa, 0x77, 0x1d, 0x2a, 0xeb, 0x6d, 0x45, 0x81, 0xf4, 0x23,
	0xfe, 0xf4, 0xbe, 0x5e, 0x43, 0x99, 0xc5, 0x3c, 0x64, 0x0e, 0xa7, 0x81, 0xfc, 0xc2, 0x43, 0xac,
	0xd7, 0xb4, 0x86, 0x4e, 0x4a, 0x2b, 0x38, 0x4a, 0x58, 0xf2, 0xa1, 0x4a, 0x2a, 0xe6, 0xd2, 0xa9,
	0x8c, 0x14, 0x36, 0x52, 0xa3, 0x98, 0x92, 0x53, 0x19, 0x29, 0x54, 0x5f, 0x77, 0x84, 0x5e, 0x44,
	0xef, 0xf1, 0x4e, 0x4d, 0x6b, 0x68, 0x64, 0x6f, 0x05, 0x89, 0x17, 0x5d, 0x67, 0x9d, 0x05, 0xce,
	0x65, 0x9d, 0x9b, 0xac, 0xf3, 0x15, 0xe7, 0xb3, 0xce, 0x2d, 0xba, 0x82, 0xf2, 0x54, 0x7a, 0x9f,
	0x64, 0xa8, 0xa8, 0xcb, 0x63, 0xee, 0xe2, 0x42, 0x4d, 0x6b, 0xec, 0x77, 0xda, 0xcd, 0x27, 0xff,
	0x77, 0xf3, 0x9c, 0x4d, 0x84, 0x12, 0x13, 0xe1, 0x0a, 0xb5, 0x20, 0x4c, 0x09, 0xdf, 0x21, 0xa5,
	0x55, 0xcf, 0x20, 0xa9, 0x79, 0xf3, 0x43, 0x03, 0xb4, 0x29, 0x21, 0x04, 0xfb, 0x97, 0xd6, 0x07,
	0x6b, 0xf8, 0xd1, 0xa2, 0xc4, 0xb4, 0xfb, 0x56, 0xaf, 0xf2, 0x1f, 0x7a, 0x0e, 0x07, 0xd6, 0xd0,
	0xa6, 0x97, 0xd6, 0xe9, 0xf0, 0xe2, 0x6c, 0x48, 0x6c, 0xf3, 0x64, 0xd0, 0xad, 0x68, 0xa8, 0x0a,
	0x87, 0xe3, 0x41, 0xbf, 0x77, 0x6e, 0x0f, 0x6e, 0x32, 0x99, 0x8e, 0x30, 0x3c, 0x3b, 0x33, 0xfb,
	0x64, 0x23, 0x31, 0xd0, 0x01, 0x94, 0xff, 0x44, 0x3b, 0xe8, 0x10, 0xd0, 0x55, 0x97, 0x64, 0xd5,
	0x1c, 0x3a, 0x82, 0x17, 0xdd, 0x6b, 0x9b, 0x74, 0x2f, 0xba, 0x1b, 0x3d, 0xf9, 0xce, 0xb7, 0xdf,
	0x2e, 0xf4, 0x98, 0x87, 0xb1, 0x98, 0x72, 0x24, 0xa1, 0xb4, 0x44, 0x9c, 0x24, 0x87, 0x83, 0x9a,
	0x7f, 0x39, 0xa4, 0xcc, 0x40, 0x54, 0x5b, 0xff, 0xec, 0x2f, 0x6f, 0xda, 0xc9, 0xbb, 0xdb, 0xce,
	0xb6, 0xf9, 0x8d, 0xdb, 0xef, 0xb7, 0x44, 0x93, 0x7c, 0x3a, 0xb1, 0x6f, 0x7f, 0x05, 0x00, 0x00,
	0xff, 0xff, 0x53, 0x95, 0x70, 0x05, 0xfc, 0x03, 0x00, 0x00,
}
